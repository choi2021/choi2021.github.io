{"componentChunkName":"component---src-templates-post-jsx","path":"/2022-12-05-호이스팅/","result":{"data":{"site":{"siteMetadata":{"title":"Troy DevLog"}},"markdownRemark":{"id":"2776079b-37ef-5268-9738-de277120a7da","excerpt":"☝ 호이스팅 자바스크립트 엔진은 변수와 함수의 선언을 선언단계와 초기화 단계, 두 단계로 나누어 처리한다. 이렇게 두 가지 단계로 나누어 처리하다 보니, 마치 선언을 스코프 최상단으로 올려서 하는 것처럼 보이게 되는데, 이것을 호이스팅이라고 한다. 변수와 함수 두가지를 나눠서 앞서 정리했던 실행 컨텍스트와 함께 호이스팅을 정리해보려 한다. 🙋‍♂️선언이란 먼저…","html":"<h1>☝ 호이스팅</h1>\n<p>자바스크립트 엔진은 변수와 함수의 선언을 선언단계와 초기화 단계, 두 단계로 나누어 처리한다. 이렇게 두 가지 단계로 나누어 처리하다 보니, 마치 선언을 스코프 최상단으로 올려서 하는 것처럼 보이게 되는데, 이것을 <strong>호이스팅</strong>이라고 한다.</p>\n<p>변수와 함수 두가지를 나눠서 앞서 정리했던 실행 컨텍스트와 함께 호이스팅을 정리해보려 한다.</p>\n<h2>🙋‍♂️선언이란</h2>\n<p>먼저 <strong>선언</strong>에 대해 정리해보면, 변수와 함수를 선언한다는 것은 해당 변수와 함수에 대한 정보를 저장할 수 있는 <u> 메모리를 할당하고 할당한 메모리와 변수를 연결하는 과정</u>이다. 이러한 선언은 다음과 같이 두 단계로 나눌 수 있다.</p>\n<ol>\n<li>선언 단계: 해당 변수와 함수를 등록하는 것</li>\n<li>초기화 단계: 해당 변수와 함수에 메모리를 할당하고 값을 저장하는 과정</li>\n</ol>\n<p>이러한 두 단계가 변수와 함수에서 어떻게 다르게 작동하는지에 대해 알아보자.</p>\n<h3>변수 선언의 호이스팅</h3>\n<p>변수 선언은 \"var\"와 \"const와 let\"으로 구분할 수 있다. 모두 동일하게 선언 단계에서 변수 이름을 등록하지만, var의 경우 선언 단계와 초기화 단계가 동시에 진행되는 특징을 가진다. 이때 var는 암묵적으로 <code class=\"language-text\">undefined</code>으로 할당된다. const와 let은 다르게 선언 단계만 진행되기 때문에 값을 가져올 수 없어 <code class=\"language-text\">referenceError</code>가 발생한다. 이렇게 const와 let의 경우, 변수 선언문을 자바스크립트 엔진이 읽을 때까지 값을 불러올 수 없는 구간이 생기는데 이것을 \"TDZ(Temporal Dead Zone)\"라 부른다.</p>\n<p>정리하면 둘 다 선언 단계에서 변수를 등록하기 때문에 호이스팅이 일어나지만, var는 const/let과 다르게 초기화단계도 함께 진행하기 때문에 변수 선언문 전에 참조가 가능하다는 특징을 가진다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>first<span class=\"token punctuation\">)</span> <span class=\"token comment\">//undefined</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>second<span class=\"token punctuation\">)</span> <span class=\"token comment\">//ReferenceError: Cannot access 'second' before initialization</span>\n<span class=\"token keyword\">var</span> first <span class=\"token operator\">=</span> <span class=\"token number\">80</span>\n<span class=\"token keyword\">const</span> second <span class=\"token operator\">=</span> <span class=\"token number\">90</span></code></pre></div>\n<h3>함수 선언의 호이스팅</h3>\n<p>함수 선언은 \"함수 선언문\"과 \"함수 표현식\"으로 구분할 수 있다. 함수 선언도 동일하게 선언 단계와 초기화 단계로 나뉘는데, 함수 선언문은 변수 선언의 var와 같이 선언 단계와 초기화 단계가 동시에 진행된다. 이때 함수 선언문은 var와는 다르게 undefined가 아니라 <code class=\"language-text\">함수 객체</code>로 초기화되어 함수를 바로 사용할 수 있다.</p>\n<p>함수 표현식은 변수에 함수를 할당하는 것이므로 \"변수 선언과 동일하게\" 진행된다. var 함수 표현식은 var 변수 선언과 동일하게 undefined로 초기화 단계가 선언단계와 함께 진행되고, const와 let 함수 표현식은 함수 선언문을 자바스크립트 엔진이 읽을 때까지 값을 불러올 수 없다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">multiply</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 2</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">)</span> <span class=\"token comment\">// undefined</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>sub<span class=\"token punctuation\">)</span> <span class=\"token comment\">// ReferenceError: Cannot access 'sub' before initialization</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">sum</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> a <span class=\"token operator\">+</span> b\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">sub</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> a <span class=\"token operator\">-</span> b\n<span class=\"token keyword\">function</span> <span class=\"token function\">multiply</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> a <span class=\"token operator\">*</span> b\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이때 var 함수 표현식은 var 변수 선언과 동일해, 함수 객체가 할당되긴 전이기 때문에, 함수로 실행하면 typeError가 발생한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// TypeError: sum is not a function</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">sum</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> a <span class=\"token operator\">+</span> b</code></pre></div>\n<p>이제 실행 컨텍스트를 이용해 자세한 내부 동작을 정리해보자</p>\n<h2>📰 실행 컨텍스트</h2>\n<p>실행 컨텍스트는 \"코드가 실행되기 위한 환경\"을 의미한다. 자바스크립트 코드를 자바스크립트 엔진이 읽을 때 항상 먼저 해당 스코프에 해당하는 실행 컨텍스트를 만든 후에, 평가 과정과 실행 과정을 진행한다. 이 두 가지 과정 중 \"평가 과정이 변수와 함수 선언의 선언 단계\"를 포함하고, \"실행 과정이 변수와 함수 선언의 초기화 단계\"를 포함한다.</p>\n<p>평가 과정을 다시 정리해보면, 실행 컨텍스트가 생성되고 lexical 환경을 만들어 실행 컨텍스트와 바인딩을 한다. 이때 lexical 환경의 구성 요소로 <u>환경 레코드</u>와 <u>외부 렉시컬 환경에 대한 참조</u> 두 가지가 있는데, 여기서 환경 레코드가 우리가 선언한 \"변수와 함수가 저장되는 곳\"이다.</p>\n<p>환경레코드는 다시 \"객체 환경 레코드\"와 \"선언적 환경 레코드\"로 나뉘어, var로 된 변수와 표현식, 함수 선언문은 \"객체 환경 레코드\"에 저장되고 const와 let으로 선언된 변수와 표현식은 \"선언적 환경 레코드\"로 구분되어 등록된다. 위에서 정리한 것처럼 평가 과정에서 var로 된 변수와 표현식은 초기화 단계를 함께 진행해 undefined으로 초기화가 되고, 함수 선언문은 함수 객체로 초기화가 된다.</p>\n<p>이후 실행 과정에서 각각 할당할 값이 있을 경우에 새로운 값으로 재 할당이 되고, 이때 const와 let의 초기화 단계가 진행된다. 이렇게 선언 과정이 실행 컨텍스트의 진행 과정에 어떻게 정리되어있는지 알아보았다.</p>\n<h2>😁 한마디</h2>\n<p>정리하면 <strong>모든 변수와 함수선언에 호이스팅이 일어난다</strong>. 하지만 선언 단계 이후에 초기화 단계가 바로 일어나냐에 따라서 참조를 할 수 있냐 없냐로 다른 결과를 가지는 것을 알 수 있다.</p>","frontmatter":{"title":"호이스팅","date":"December 05, 2022","tags":["javascript","문법"],"series":null},"fields":{"slug":"/2022-12-05-호이스팅/","readingTime":{"minutes":7.63}}},"seriesList":{"edges":[{"node":{"id":"4dd6f66b-f311-5b91-9eac-28095d67106f","fields":{"slug":"/2022-09-06-BEM과-자료형/"},"frontmatter":{"title":"BEM과 자바스크립트의 자료형"}}},{"node":{"id":"484c98ee-5762-55db-84b4-6b21ae960acf","fields":{"slug":"/2022-09-07-자바스트립트의-두가지-복사방법/"},"frontmatter":{"title":"자바스크립트의 두가지 복사 방법"}}},{"node":{"id":"352ba125-5786-518a-9c7a-303042a0755f","fields":{"slug":"/2022-09-07-자바스크립트의-타입과연산자/"},"frontmatter":{"title":"자바스크립트의 타입과 연산자"}}},{"node":{"id":"10db5919-95c0-53f5-94be-dcbac01e5d37","fields":{"slug":"/2022-09-10-intersection-observer /"},"frontmatter":{"title":"Intersection observer"}}},{"node":{"id":"5b188256-9365-5320-a67f-97afab6d630f","fields":{"slug":"/2022-09-12-브라우저API/"},"frontmatter":{"title":"Browser API"}}},{"node":{"id":"db56d225-cd7a-5168-8079-35d6d038e94f","fields":{"slug":"/2022-09-13-함수/"},"frontmatter":{"title":"함수"}}},{"node":{"id":"80cd5d8e-ad25-5b3f-921a-53a5f16a9bd5","fields":{"slug":"/2022-09-14-객체/"},"frontmatter":{"title":"객체"}}},{"node":{"id":"44dc8bd6-7888-58d2-b3fb-124760fd2e55","fields":{"slug":"/2022-09-17-빌트인객체/"},"frontmatter":{"title":"빌트인 객체"}}},{"node":{"id":"75d48151-20bb-5d55-9b13-7c77c923e577","fields":{"slug":"/2022-09-19-array/"},"frontmatter":{"title":"Array"}}},{"node":{"id":"962839d3-d3ea-5820-a045-07d3cdaa0079","fields":{"slug":"/2022-09-22-iteration/"},"frontmatter":{"title":"Iteration"}}},{"node":{"id":"cd30073c-7f4c-54d8-b893-090480da82c3","fields":{"slug":"/2022-09-24-Map과Set/"},"frontmatter":{"title":"Map과 Set"}}},{"node":{"id":"900f53ea-b7eb-5996-b44b-626400cf9d87","fields":{"slug":"/2022-10-06-HTTP란/"},"frontmatter":{"title":"HTTP 정리"}}},{"node":{"id":"458970f3-d49a-5b5f-8975-6f084e4ab43b","fields":{"slug":"/2022-10-18-Node-JS-기초/"},"frontmatter":{"title":"Node js:NodeJS 이용한 서버 만들기"}}},{"node":{"id":"f0792841-794b-5ec0-a351-a2f7605adc40","fields":{"slug":"/2022-10-19-Express-기초/"},"frontmatter":{"title":"NodeJS: express"}}},{"node":{"id":"d2bb44f2-60ad-5ed7-90ab-2bf43c831572","fields":{"slug":"/2022-11-18-CSR과-SSR/"},"frontmatter":{"title":"CSR과 SSR 그리고 Universal Rendering"}}},{"node":{"id":"cb62a84f-d1d5-5894-8175-64624d84a372","fields":{"slug":"/2022-11-20-스코프-실행컨테스트-클로저/"},"frontmatter":{"title":"스코프,실행컨텍스트,클로저"}}},{"node":{"id":"3b08f6c0-b947-5562-b38c-1228108dd551","fields":{"slug":"/2022-11-24-Critical-Rendering-Path/"},"frontmatter":{"title":"💻 Critical Rendering Path"}}},{"node":{"id":"9735256f-9deb-5bc5-a7a3-9d68d3278b4a","fields":{"slug":"/2022-11-27-비동기와-프로미스/"},"frontmatter":{"title":"비동기와 프로미스"}}},{"node":{"id":"ce607981-e768-5fdf-96d7-5d026072082f","fields":{"slug":"/2022-11-30-지스트-청원-서비스-회고/"},"frontmatter":{"title":"지스트 청원서비스 회고"}}},{"node":{"id":"f6194d07-b810-5332-9cbc-da0ce80eb312","fields":{"slug":"/2022-12-02-제너레이터와-async-await/"},"frontmatter":{"title":"제너레이터와 Async-Await"}}},{"node":{"id":"ad48afd5-0612-56fe-a974-7edb7de83a74","fields":{"slug":"/2022-12-03-모으잡-리팩토링/"},"frontmatter":{"title":"모으잡-check box 수정, react-query 커스텀 훅, 크롤링 이슈"}}},{"node":{"id":"2776079b-37ef-5268-9738-de277120a7da","fields":{"slug":"/2022-12-05-호이스팅/"},"frontmatter":{"title":"호이스팅"}}},{"node":{"id":"01501fd0-6b11-5e0d-80ae-5f607d766625","fields":{"slug":"/2022-12-09-쿠키-session-jwt/"},"frontmatter":{"title":"Cookie,Session과 JWT"}}},{"node":{"id":"72347779-5753-5035-b978-e4569b4f14cf","fields":{"slug":"/2022-12-09-this/"},"frontmatter":{"title":"this"}}},{"node":{"id":"a64e2757-3cf3-5eb6-a560-d93cbc6b68b2","fields":{"slug":"/2022-12-10-http와https/"},"frontmatter":{"title":"http와 https"}}},{"node":{"id":"89b94977-8c1a-5723-af2b-1bf7c7750ebe","fields":{"slug":"/2022-12-12-생성자함수-프로토타입/"},"frontmatter":{"title":"생성자 함수, 프로토타입"}}},{"node":{"id":"5d40ad58-a897-564b-9a54-5c4a65ca9c0c","fields":{"slug":"/2022-12-30-이벤트/"},"frontmatter":{"title":"이벤트"}}},{"node":{"id":"93b78365-058d-511b-bb11-72485e3f0d70","fields":{"slug":"/2022-12-23-class/"},"frontmatter":{"title":"클래스"}}},{"node":{"id":"94db5333-429d-592a-a409-e8f0a0c76354","fields":{"slug":"/2023-01-23-리액트의-기본원리/"},"frontmatter":{"title":"React study: 리액트의 기본 원리"}}},{"node":{"id":"fe5c6476-9c85-50cc-938a-137246b45864","fields":{"slug":"/2023-01-23-Vite와-번들러/"},"frontmatter":{"title":"Vite는 왜 빠를까, 번들러에 대한 정리"}}},{"node":{"id":"80445e0b-511b-5e28-bde0-99498fbf3a5d","fields":{"slug":"/2022-12-20-리액트-성능보장/"},"frontmatter":{"title":"React study: 리액트가 성능을 보장하는 방법"}}},{"node":{"id":"782ca102-9c01-52ee-8b4d-b5432da4b448","fields":{"slug":"/2023-02-03-useState,useEffect, useRef, memo/"},"frontmatter":{"title":"React Study: useState, useEffect, useRef, memo"}}},{"node":{"id":"c1d41785-332b-595b-b9b8-0c7a719657c7","fields":{"slug":"/2023-02-17-취업준비-회고/"},"frontmatter":{"title":"신입으로 시작하며 작성하는 취준 회고"}}},{"node":{"id":"e06ed826-880e-5b59-ae78-c098858b0634","fields":{"slug":"/2023-02-21-google.com-입력했을때-일어나는-일/"},"frontmatter":{"title":"google.com를 브라우저에 검색했을 때 일어나는 일"}}},{"node":{"id":"aad7179c-dbc9-5851-a7fd-38251e0a508b","fields":{"slug":"/2023-03-01-CDN/"},"frontmatter":{"title":"CDN은 뭘까?"}}},{"node":{"id":"beed37b9-064d-581e-89d3-b4c43838e429","fields":{"slug":"/2023-03-05-디자인패턴/"},"frontmatter":{"title":"MVC, MVVM, Flux패턴 그리고 Service와 Repository 패턴"}}},{"node":{"id":"6f3b633d-c73e-5585-b597-edaa1d26c2bb","fields":{"slug":"/2023-03-31-2023년-3월회고/"},"frontmatter":{"title":"🐤 2023년 3월 회고"}}},{"node":{"id":"aed1969e-b959-5454-8c2f-52c4a0ec6e94","fields":{"slug":"/2023-05-06-2023년-4월회고/"},"frontmatter":{"title":"😎 2023년 4월 회고"}}},{"node":{"id":"a73d6084-a910-5da1-bcb0-f555558f6e3b","fields":{"slug":"/2023-06-05-2023년-5월회고/"},"frontmatter":{"title":"☀︎ 2023년 5월 회고"}}},{"node":{"id":"90c8982f-2982-5a80-bd85-6283a0f82d70","fields":{"slug":"/2023-07-06-2023년-6월회고/"},"frontmatter":{"title":"☼ 2023년 6월 회고"}}},{"node":{"id":"88fffefc-5bb1-5a85-b1aa-b0ac1d4bed94","fields":{"slug":"/2023-08-09-2023년-7월회고/"},"frontmatter":{"title":"☂︎ 2023년 7월 회고"}}},{"node":{"id":"e274816c-0eb9-5b42-93d0-823495b63d87","fields":{"slug":"/2023-09-09-2023년-8월회고/"},"frontmatter":{"title":"😊 2023년 8월 회고"}}},{"node":{"id":"0370cc06-a8be-5505-9714-383d053b476d","fields":{"slug":"/2023-10-03-2023년-9월회고/"},"frontmatter":{"title":"🚅 2023년 9월 회고"}}},{"node":{"id":"4eea6c19-13d8-5363-bc87-963f217b7a42","fields":{"slug":"/2023-11-01-2023년-10월회고/"},"frontmatter":{"title":"🧐 2023년 10월 회고"}}},{"node":{"id":"a2a6e999-a53d-5e52-aae6-d57a75673c5f","fields":{"slug":"/2023-12-02-2023년-11월회고/"},"frontmatter":{"title":"😃 2023년 11월 회고"}}},{"node":{"id":"ee90f174-21d6-5bbf-b2cf-6fd226bc9353","fields":{"slug":"/2023-12-31-2023년-12월회고/"},"frontmatter":{"title":"🌟 2023년 12월 회고"}}},{"node":{"id":"642af668-e5c7-501d-bbaa-7a7e0724a982","fields":{"slug":"/2024-02-07-2024년-1월회고/"},"frontmatter":{"title":"🐥 2024년 1월회고"}}},{"node":{"id":"f30aaeb4-d2ed-5b78-82cb-556facbdb597","fields":{"slug":"/2024-03-02-2024년-2월회고/"},"frontmatter":{"title":"🙊 2024년 2월회고"}}},{"node":{"id":"0a55cde5-eb6e-50ef-a0b9-3307863119d1","fields":{"slug":"/2024-03-03-자바스크립트의-동시성-이해하기/"},"frontmatter":{"title":"Promise.all의 동시성 이해하기"}}},{"node":{"id":"b8f3cba2-e71c-5b78-9eef-169fcdfde70f","fields":{"slug":"/2024-03-30-App-StartUp-time-개선/"},"frontmatter":{"title":"App StartUp time 개선"}}},{"node":{"id":"8ffb09b1-c80e-58a2-b89a-6e3c6729e89b","fields":{"slug":"/2024-04-07-2024년-3월회고/"},"frontmatter":{"title":"🙌 2024년 3월회고"}}},{"node":{"id":"67fd6178-63b4-5b39-8e3c-fb1b0c5db869","fields":{"slug":"/2024-04-21-onViewableItemsChanged-이해해보기/"},"frontmatter":{"title":"👀 onViewableItemsChanged 이해해보기"}}},{"node":{"id":"40a3836b-74fe-59bb-80a8-7d921608f55a","fields":{"slug":"/2024-05-01-2024년-4월회고/"},"frontmatter":{"title":"🙌 2024년 4월회고"}}},{"node":{"id":"6a36dcc8-a80b-5581-9649-954e0ad0c5eb","fields":{"slug":"/2024-06-01-2024년-5월회고/"},"frontmatter":{"title":"🙌 2024년 5월회고"}}},{"node":{"id":"39b77a6b-96d6-5c2e-9012-c6b6be81f72d","fields":{"slug":"/2024-06-02-에러바운더리-도입하기/"},"frontmatter":{"title":"✅ 에러바운더리 도입하기"}}},{"node":{"id":"f85b5d27-6e2c-5dd3-8ca4-1f8b70fb4815","fields":{"slug":"/2024-06-30-2024년-6월회고/"},"frontmatter":{"title":"🤭 2024년 6월회고"}}},{"node":{"id":"e4ae5f2a-10c8-58d3-bacb-6a25ce1b95fc","fields":{"slug":"/2024-06-30-NativeStack적용하기/"},"frontmatter":{"title":"🖥️ Native Stack 적용하기"}}},{"node":{"id":"36c25ccf-f28b-5447-9899-c3d0d414a44f","fields":{"slug":"/2024-08-03-2024년-7월회고/"},"frontmatter":{"title":"👏 2024년 7월회고 "}}},{"node":{"id":"e7ef6c08-c8ff-556b-8f64-b2e61225fa6f","fields":{"slug":"/2024-09-15-2024년-8월회고/"},"frontmatter":{"title":"🥳 2024년 8월회고 "}}},{"node":{"id":"7e844836-6a81-5bd8-a59f-4907b5d6fab3","fields":{"slug":"/2024-09-17-useFunnel-분석해보기/"},"frontmatter":{"title":"📚 useFunnel 분석하고 따라 만들어 보기"}}},{"node":{"id":"54a91c29-22f4-5ec0-ac9b-2902d00e195d","fields":{"slug":"/2024-09-25-로딩경험-개선/"},"frontmatter":{"title":"⏳ 로딩 경험 개선"}}},{"node":{"id":"5d3a72d4-3907-5696-ba59-56b475ad67af","fields":{"slug":"/2024-10-01-2024년-9월-회고/"},"frontmatter":{"title":"9️⃣ 2024년 9월 회고"}}},{"node":{"id":"6ce7e536-b3fc-556d-84f8-09e393e3180e","fields":{"slug":"/2024-10-25-숨고를-떠나며/"},"frontmatter":{"title":"10월 회고, 숨고를 떠나며"}}},{"node":{"id":"f3912500-0fb7-5202-9f96-94405a29c7d7","fields":{"slug":"/2024-11-18-패키지매니저/"},"frontmatter":{"title":"패키지 매니저 비교해보기"}}},{"node":{"id":"f8303667-d369-58a3-bcc5-6d612982cfeb","fields":{"slug":"/2024-11-24-overlay-kit-분석/"},"frontmatter":{"title":"Overlay Kit 분석"}}},{"node":{"id":"e431d5fb-3f76-5190-b63a-51e32f5d7244","fields":{"slug":"/2024-12-01-2024년-11월회고/"},"frontmatter":{"title":"2024년 11월 회고, welcome to 토스"}}},{"node":{"id":"7e7c7b65-d941-5e27-bf28-d0d6785641d8","fields":{"slug":"/2024-12-27-2024년-12월회고/"},"frontmatter":{"title":"2024년 12월 회고, bye bye 2024"}}},{"node":{"id":"ae2f4760-8f15-5064-8fc2-40a0eeb1067e","fields":{"slug":"/2025-01-19-useFunnel-분석/"},"frontmatter":{"title":"useFunnel 분석"}}},{"node":{"id":"5f409a8e-dd1e-5c32-b6ba-f8ed6ad364ab","fields":{"slug":"/2025-01-27/"},"frontmatter":{"title":"2025년 1월 회고"}}}]},"previous":{"fields":{"slug":"/2022-12-03-모으잡-리팩토링/"},"frontmatter":{"title":"모으잡-check box 수정, react-query 커스텀 훅, 크롤링 이슈"}},"next":{"fields":{"slug":"/2022-12-09-쿠키-session-jwt/"},"frontmatter":{"title":"Cookie,Session과 JWT"}}},"pageContext":{"id":"2776079b-37ef-5268-9738-de277120a7da","series":null,"previousPostId":"ad48afd5-0612-56fe-a974-7edb7de83a74","nextPostId":"01501fd0-6b11-5e0d-80ae-5f607d766625"}},"staticQueryHashes":[],"slicesMap":{}}