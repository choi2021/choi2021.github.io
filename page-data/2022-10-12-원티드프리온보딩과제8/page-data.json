{"componentChunkName":"component---src-templates-post-jsx","path":"/2022-10-12-원티드프리온보딩과제8/","result":{"data":{"site":{"siteMetadata":{"title":"Troy DevLog"}},"markdownRemark":{"id":"f6746d99-0c3c-57b2-8b10-1f2d3770e2c3","excerpt":"최적화를 위한 todo Btn 컴포넌트 분리 TodoItem은 memo를 통해 최적화를 해두었기 때문에 투두 아이템에 클릭을 하면 다른 투두아이템들이 re-rendering되는 것은 막았다. 하지만 같은 TodoItem 내부에서 클릭되지 않은 버튼들이 다시 re-rendering이 되는 것을 보고, TodoBtn 컴포넌트로 분리하고 memo로 감싸준 다음…","html":"<h2>최적화를 위한 todo Btn 컴포넌트 분리</h2>\n<p>TodoItem은 memo를 통해 최적화를 해두었기 때문에 투두 아이템에 클릭을 하면 다른 투두아이템들이 re-rendering되는 것은 막았다.</p>\n<p>하지만 같은 TodoItem 내부에서 클릭되지 않은 버튼들이 다시 re-rendering이 되는 것을 보고, TodoBtn 컴포넌트로 분리하고 memo로 감싸준 다음,</p>\n<p>전달해주는 함수들은 useCallback을 통해 불필요한 re-rendering을 막았다.</p>\n<div class=\"gatsby-highlight\" data-language=\"react\"><pre class=\"language-react\"><code class=\"language-react\">//TodoBtn.jsx\n\nfunction TodoBtn({ name, clicked, onClick, text }) {\n  return (\n    &lt;S.Btn name={name} clicked={clicked} onClick={onClick}&gt;\n      {text}\n    &lt;/S.Btn&gt;\n  );\n}\n\nexport default memo(TodoBtn);\n\n//TodoItem.jsx\n\nfunction TodoItem({\n  todoItem: { isCompleted, id, todo },\n  todoItem,\n  onDelete,\n  onUpdate,\n}) {\n\t...\n\n  const onClick = useCallback((e) =&gt; {\n    const { name } = e.currentTarget;\n    if (name === &#39;cancel&#39;) {\n      inputRef.current.value = ``;\n    }\n    setOnModifyMode((prev) =&gt; !prev);\n  }, []);\n\n  const handleDelete = useCallback(() =&gt; {\n    onDelete(id);\n  }, [id, onDelete]);\n\n  const handleCompleteUpdate = useCallback((e) =&gt; {\n    const { name } = e.currentTarget;\n    if (name === &#39;complete&#39;) {\n      setUpdated((prev) =&gt; {\n        return { ...prev, isCompleted: true };\n      });\n    } else {\n      setUpdated((prev) =&gt; {\n        return { ...prev, isCompleted: false };\n      });\n    }\n  }, []);\n\n  const handleSubmit = useCallback(() =&gt; {\n    const todo = inputRef.current.value;\n    if (!todo) {\n      setIsBlank(true);\n      return;\n    }\n    onUpdate({ ...updated, todo });\n    inputRef.current.value = ``;\n    setOnModifyMode((prev) =&gt; !prev);\n    setIsBlank(false);\n  }, [onUpdate, updated]);\n\n  return (\n    &lt;S.TodoLayout&gt;\n     ...\n      &lt;S.RightBox&gt;\n        {onModifyMode ? (\n          &lt;&gt;\n            &lt;div&gt;\n              &lt;TodoBtn\n                name=&#39;complete&#39;\n                clicked={updated.isCompleted}\n                onClick={handleCompleteUpdate}\n                text=&#39;Completed🙆‍♀️&#39;\n              &gt;&lt;/TodoBtn&gt;\n              &lt;TodoBtn\n                name=&#39;not yet&#39;\n                clicked={!updated.isCompleted}\n                onClick={handleCompleteUpdate}\n                text=&#39;Not yet 🙅‍♂️&#39;\n              &gt;&lt;/TodoBtn&gt;\n            &lt;/div&gt;\n            &lt;TodoBtn name=&#39;cancel&#39; onClick={onClick} text=&#39;취소하기&#39;&gt;&lt;/TodoBtn&gt;\n            &lt;TodoBtn\n              name=&#39;submit&#39;\n              onClick={handleSubmit}\n              text=&#39;제출하기&#39;\n            &gt;&lt;/TodoBtn&gt;\n          &lt;/&gt;\n        ) : (\n          &lt;&gt;\n            &lt;TodoBtn\n              text={isCompleted ? &#39;Completed🙆‍♀️&#39; : &#39;Not yet 🙅‍♂️&#39;}\n            &gt;&lt;/TodoBtn&gt;\n            &lt;TodoBtn\n              name=&#39;modify&#39;\n              onClick={onClick}\n              text={&#39;수정하기&#39;}\n            &gt;&lt;/TodoBtn&gt;\n          &lt;/&gt;\n        )}\n        &lt;TodoBtn onClick={handleDelete} text={&#39;삭제하기&#39;}&gt;&lt;/TodoBtn&gt;\n      &lt;/S.RightBox&gt;\n    &lt;/S.TodoLayout&gt;\n  );\n}\n\nexport default memo(TodoItem);</code></pre></div>\n<h2>fetch를 이용한 에러핸들링</h2>\n<h4>문제점</h4>\n<p>​ 기존 코드에서 exceptionTest라는 함수는 에러가 발생했던, 성공을 했던 data를 받아서, 성공과 실패를 함께 처리했다. 하지만 이렇게 처리하게 되면 성공과 실패가 로그인과 회원가입 각각에 맞게 엉켜있고 너무 많은 일을 하다 보니, 받아야할 변수가 많아 이해하기 어렵고 수정하기도 어려웠다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> exceptionTest <span class=\"token operator\">=</span> <span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">(</span><span class=\"token parameter\">data<span class=\"token punctuation\">,</span> setMessage<span class=\"token punctuation\">,</span> process</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">message</span><span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">success</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>statusCode <span class=\"token operator\">>=</span> <span class=\"token number\">400</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>statusCode <span class=\"token operator\">===</span> <span class=\"token number\">401</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        result <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token literal-property property\">message</span><span class=\"token operator\">:</span> <span class=\"token string\">'이메일 혹은 비밀번호를 확인해주세요.'</span><span class=\"token punctuation\">,</span>\n          <span class=\"token literal-property property\">success</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        result <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token literal-property property\">message</span><span class=\"token operator\">:</span> data<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">,</span>\n          <span class=\"token literal-property property\">success</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>process <span class=\"token operator\">===</span> <span class=\"token string\">'login'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">navigate</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/todo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">setItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'access_token'</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">.</span>access_token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      result <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">message</span><span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>\n          process <span class=\"token operator\">===</span> <span class=\"token string\">'login'</span> <span class=\"token operator\">?</span> <span class=\"token string\">'로그인'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'회원가입'</span>\n        <span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">에 성공했습니다</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">success</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">setMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prev</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token operator\">...</span>prev<span class=\"token punctuation\">,</span>\n        <span class=\"token operator\">...</span>result<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span>navigate<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h4>해결방법</h4>\n<p>이런 문제를 해결하고 싶어서 에러핸들링에 대한 자료를 계속해서 찾고 있었지만 정확히 이해가 되지 않아서 정리하지 못하고 있었다가, 타입스크립트에서 fetch를 이용해 에러 핸들링을 하신 글을 보게 되었다. ( <a href=\"https://www.rinae.dev/posts/how-to-handle-errors-2\">https://www.rinae.dev/posts/how-to-handle-errors-2</a>)</p>\n<p>코드는 다음과 같았다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">CustomError</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Error</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>message<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span><span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>name\n    Object<span class=\"token punctuation\">.</span><span class=\"token function\">setPrototypeOf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span><span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span>\n    Error<span class=\"token punctuation\">.</span>captureStackTrace <span class=\"token operator\">&amp;&amp;</span> Error<span class=\"token punctuation\">.</span><span class=\"token function\">captureStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>constructor<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 하는 김에 스택트레이스도 바로잡아줍시다</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">HTTPError</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">CustomError</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">private</span> statusCode<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">private</span> errorData<span class=\"token operator\">:</span> Record<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">any</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n    message<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> ‘HTTPError’\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">get</span> <span class=\"token function\">rawErrorData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>errorData\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">get</span> <span class=\"token function\">codeToErrorMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>statusCode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">case</span> <span class=\"token number\">401</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">You don’t have a permission.</span><span class=\"token template-punctuation string\">`</span></span>\n      <span class=\"token comment\">// ...</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Error 객체를 상속하는 CustomError 클래스를 만들고, CustomError클래스를 상속하는 HTTPError클래스를 만들어서 해당 statusCode에 따른 결과를 전달해주는 방식이었다.</p>\n<p>HTTPError클래스는 getter를 이용해 codeToErrorMessage라는 함수를 만들었는데 getter를 이용한 이유는 클래스의 statusCode값이 바뀔 때 같이 업데이트 될 수 있게 하기 위해서라고 생각되었고, 직접적인 수정을 막기위해서 getter로 읽을 수만 있게 설정했다고 이해했다.</p>\n<h4>적용해보기</h4>\n<p>이 글을 제대로 이해하고 이렇게 한번 해보기로 마음먹었을 때 시간이 저녁 11시여서, 12시가 되기 전 제출해야했기 때문에 우선 HTTPError클래스만 Error를 상속해 만들었다.</p>\n<p>Error객체를 상속할 때는 반드시 message를 전달해주어야하기에 super를 통해 상속한 Error객체에 전달하고, statusCode를 constructor함수를 이용해서 저장한다. constructor를 통해 저장한 statusCode에 따라 message상태에 전해줄 객체를 반환하게 함수를 만들었다.</p>\n<p>클래스로 분리함으로써 HTTP에러가 발생했을 때의 로직을 분리해서 관리할 수 있기 때문에 더 가독성이 좋아졌다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//auth.js</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">HTTPError</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Error</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">statusCode<span class=\"token punctuation\">,</span> message</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">HTTPError</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>statusCode <span class=\"token operator\">=</span> statusCode<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">get</span> <span class=\"token function\">codeToErrorMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">message</span><span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">success</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>statusCode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">case</span> <span class=\"token number\">400</span><span class=\"token operator\">:</span>\n        result <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token literal-property property\">message</span><span class=\"token operator\">:</span> <span class=\"token string\">'동일한 이메일이 이미 존재합니다.'</span><span class=\"token punctuation\">,</span>\n          <span class=\"token literal-property property\">success</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">case</span> <span class=\"token number\">401</span><span class=\"token operator\">:</span>\n        result <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token literal-property property\">message</span><span class=\"token operator\">:</span> <span class=\"token string\">'이메일 혹은 비밀번호를 확인해주세요.'</span><span class=\"token punctuation\">,</span>\n          <span class=\"token literal-property property\">success</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">case</span> <span class=\"token number\">404</span><span class=\"token operator\">:</span>\n        result <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token literal-property property\">message</span><span class=\"token operator\">:</span> <span class=\"token string\">'해당 사용자가 존재하지 않습니다.'</span><span class=\"token punctuation\">,</span>\n          <span class=\"token literal-property property\">success</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Unknown Error'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">postSignUp</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">email<span class=\"token punctuation\">,</span> password</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">BASE_URL</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/auth/signup</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">method</span><span class=\"token operator\">:</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">headers</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string-property property\">'Content-Type'</span><span class=\"token operator\">:</span> <span class=\"token string\">'application/json'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">body</span><span class=\"token operator\">:</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        email<span class=\"token punctuation\">,</span>\n        password<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>res<span class=\"token punctuation\">.</span>ok<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>res<span class=\"token punctuation\">.</span>status<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">에러가 발생했습니다</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HTTPError</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>status<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">.</span>statusText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">await</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> e<span class=\"token punctuation\">.</span>codeToErrorMessage<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>반환한 객체를 받았던 handleSubmit함수는 각각 login과 회원가입으로 2개의 함수로 분리했다.</p>\n<p>분리 후에 성공한 경우는 둘 다 access<em>token이 들어있는 객체를 전달받기 때문에 access</em>token이라는 프로퍼티의 유무에 따라 성공과 에러 처리를 하게 했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"react\"><pre class=\"language-react\"><code class=\"language-react\">//auth.jsx\n\nconst handleLoginSubmit = useCallback(\n    (info) =&gt; {\n      const { email, password } = info;\n      postSignIn(email, password) //\n        .then((data) =&gt; {\n          if (&#39;access_token&#39; in data) {\n            navigate(&#39;/todo&#39;);\n            localStorage.setItem(&#39;access_token&#39;, data.access_token);\n          } else {\n            setLoginMessage((prev) =&gt; {\n              return {\n                ...prev,\n                ...data,\n              };\n            });\n          }\n        });\n    },\n    [navigate]\n  );\n\nconst handleRegisterSubmit = useCallback((info) =&gt; {\n    const { email, password } = info;\n    postSignUp(email, password) //\n      .then((data) =&gt; {\n        if (&#39;access_token&#39; in data) {\n          data = {\n            message: `회원가입에 성공했습니다`,\n            success: true,\n          };\n        }\n        setRegisterMessage((prev) =&gt; {\n          return {\n            ...prev,\n            ...data,\n          };\n        });\n      });\n  }, []);</code></pre></div>\n<p>이렇게 에러와 성공, 로그인과 회원가입을 로직을 분리하니까 더 보기 좋고 이해가 편해졌다.</p>\n<p>너무 과도하게 합치는 게 더 이해하기 어렵다는 것을 느꼈고, 에러핸들링을 할 때 customError클래스를 만들어서 처리하는 방법에 대해 배울 수 있었다.</p>","frontmatter":{"title":"원티드 프리온보딩 과제-리팩토링:todoBtn 컴포넌트 분리,에러핸들링","date":"October 12, 2022","tags":["원티드프리온보딩"],"series":"원티드프리온보딩"},"fields":{"slug":"/2022-10-12-원티드프리온보딩과제8/","readingTime":{"minutes":7.985}}},"seriesList":{"edges":[{"node":{"id":"f7e153bc-b4a1-5c03-9372-06e76a5da423","fields":{"slug":"/2022-10-04-원티드 프리온보딩 과제 1편/"},"frontmatter":{"title":"원티드 프리온보딩 사전과제-과제 1,2"}}},{"node":{"id":"7ae817c7-3e3f-5597-a1ce-80840e62462b","fields":{"slug":"/2022-10-05-원티드-프리온보딩-과제-2편/"},"frontmatter":{"title":"원티드 프리온보딩 사전과제-과제 2,3"}}},{"node":{"id":"d036a290-e927-5383-8b1d-993a8ed8c794","fields":{"slug":"/2022-10-06-원티드 프리온보딩 과제 3편/"},"frontmatter":{"title":"원티드 프리온보딩 사전과제-과제 3편"}}},{"node":{"id":"3e41dc8a-b610-5427-bfe4-9a9c3557bffb","fields":{"slug":"/2022-10-08-원티드프리온보딩과제4/"},"frontmatter":{"title":"원티드 프리온보딩 과제-login/register 컴포넌트화"}}},{"node":{"id":"73a3c928-fa52-5501-9938-8eece83ae45c","fields":{"slug":"/2022-10-09-원티드프리온보딩과제5/"},"frontmatter":{"title":"원티드 프리온보딩 과제-폴더 구조 수정"}}},{"node":{"id":"e5737f1b-7b44-5548-9a92-a0d99e8821bb","fields":{"slug":"/2022-10-10-원티드프리온보딩과제6/"},"frontmatter":{"title":"원티드 프리온보딩 과제-HTTP에러정리, fetch 에러핸들링 시도"}}},{"node":{"id":"29625880-cc86-526b-b650-b9bc8ee7d16c","fields":{"slug":"/2022-10-11-원티드프리온보딩과제7/"},"frontmatter":{"title":"원티드 프리온보딩 과제-리팩토링:최적화,netlify를 이용한 배포"}}},{"node":{"id":"f6746d99-0c3c-57b2-8b10-1f2d3770e2c3","fields":{"slug":"/2022-10-12-원티드프리온보딩과제8/"},"frontmatter":{"title":"원티드 프리온보딩 과제-리팩토링:todoBtn 컴포넌트 분리,에러핸들링"}}},{"node":{"id":"e6aa9c8d-2e3a-55ea-ae9e-f8eca03b270e","fields":{"slug":"/2022-10-13-원티드 프리온보딩사전과제회고/"},"frontmatter":{"title":"원티드 프리온보딩 사전과제-회고"}}},{"node":{"id":"dafe14dd-c51d-5ae4-a73c-ae39cf910b4d","fields":{"slug":"/2022-10-25-원티드프리온보딩-1주차-1일/"},"frontmatter":{"title":"원티드 프리온보딩 1주차 1-1 협력툴:ESLint,Prettier,Git Hook, Husky"}}},{"node":{"id":"e35bbcaa-e695-518d-b955-34ad7f1b073f","fields":{"slug":"/2022-10-25-원티드프리온보딩-1주차-2일/"},"frontmatter":{"title":"원티드 프리온보딩 1주차 첫째주 과제-best case찾기와 보충공부:context API"}}},{"node":{"id":"fc36457b-4432-5eae-9056-606dfb375804","fields":{"slug":"/2022-10-27-원티드 프리온보딩-1주-3일차/"},"frontmatter":{"title":"원티드 프리온보딩 1주차 첫째주 과제 3일차-best case 프로젝트 회고"}}},{"node":{"id":"81e94920-65df-5f6b-b854-2701c616bcc7","fields":{"slug":"/2022-10-28-원티드 프리온보딩-1주차-4일/"},"frontmatter":{"title":"원티드 프리온보딩 1주차 첫째주 4일차-초기세팅 커밋 합치기"}}},{"node":{"id":"9f2e1dec-5bb3-514e-809b-4ab032184b86","fields":{"slug":"/2022-10-31-원티드 프리온보딩-1-2-과제-회고/"},"frontmatter":{"title":"원티드 프리온보딩 1-2 과제회고"}}},{"node":{"id":"5cac3131-6374-547f-b2c8-96e0f6084594","fields":{"slug":"/2022-11-04-원티드 프리온보딩-2-1-과제-회고/"},"frontmatter":{"title":"원티드 프리온보딩 2-1 과제회고"}}},{"node":{"id":"15f55c7c-3142-5102-a046-55582836a60a","fields":{"slug":"/2022-11-07-원티드 프리온보딩-2-2-과제-회고/"},"frontmatter":{"title":"원티드 프리온보딩 2-2 과제회고"}}},{"node":{"id":"20495c35-f22e-531b-b308-329bd9305a00","fields":{"slug":"/2022-11-11-원티드 프리온보딩-3-1-과제-회고/"},"frontmatter":{"title":"원티드 프리온보딩 3-1 과제회고"}}},{"node":{"id":"4659ef8b-53a8-5f72-bbe8-967b2b76f5b7","fields":{"slug":"/2022-11-19-원티드-프리온보딩-마지막 과제회고/"},"frontmatter":{"title":"원티드 프리온보딩 마지막 과제회고"}}}]},"previous":{"fields":{"slug":"/2022-10-11-원티드프리온보딩과제7/"},"frontmatter":{"title":"원티드 프리온보딩 과제-리팩토링:최적화,netlify를 이용한 배포"}},"next":{"fields":{"slug":"/2022-10-13-원티드 프리온보딩사전과제회고/"},"frontmatter":{"title":"원티드 프리온보딩 사전과제-회고"}}},"pageContext":{"id":"f6746d99-0c3c-57b2-8b10-1f2d3770e2c3","series":"원티드프리온보딩","previousPostId":"29625880-cc86-526b-b650-b9bc8ee7d16c","nextPostId":"e6aa9c8d-2e3a-55ea-ae9e-f8eca03b270e"}},"staticQueryHashes":[],"slicesMap":{}}