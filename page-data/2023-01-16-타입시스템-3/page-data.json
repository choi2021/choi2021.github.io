{"componentChunkName":"component---src-templates-post-jsx","path":"/2023-01-16-타입시스템-3/","result":{"data":{"site":{"siteMetadata":{"title":"Troy DevLog"}},"markdownRemark":{"id":"c5af547a-22ba-513d-ad11-390454722177","excerpt":"🎚 타입 시스템(3) 타입시스템에 대한 정리 중 마지막으로 제네릭, 인덱스 시그니처, Array 타입과 readonly에 대해 정리해보려 한다. 🕹 제네릭 타입스크립트를 사용할 수록 느끼는 점은 타입을 다룬다는 것은 추가적인 변수와 함수를 다루는 것 같았다. 그 이유는 변수를 재 사용하고 반복되는 로직은 함수로 분리하듯 타입의 재사용성을 고려해야 했기 때…","html":"<h1>🎚 타입 시스템(3)</h1>\n<p>타입시스템에 대한 정리 중 마지막으로 <strong>제네릭, 인덱스 시그니처, Array 타입과 readonly</strong>에 대해 정리해보려 한다.</p>\n<h2>🕹 제네릭</h2>\n<p>타입스크립트를 사용할 수록 느끼는 점은 타입을 다룬다는 것은 추가적인 변수와 함수를 다루는 것 같았다. 그 이유는 변수를 재 사용하고 반복되는 로직은 함수로 분리하듯 타입의 재사용성을 고려해야 했기 때문이다. 코드 반복을 줄이려는 노력은 <strong>DRY(Don't Repeat Yourself)</strong>로 불리는 프로그래밍의 기본 원칙으로 타입에도 적용된다.</p>\n<h3>1. 타입 네이밍</h3>\n<p>중복되는 변수가 있다면 하나의 상수로 정해서 사용하듯이 타입에 이름을 붙여서 사용해 중복을 제거할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// 네이밍 전</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">distance</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span> y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span> y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">pow</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>x <span class=\"token operator\">-</span> b<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">pow</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>y <span class=\"token operator\">-</span> b<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 네이밍 후</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Point2D</span> <span class=\"token punctuation\">{</span>\n  x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n  y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">distance</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> Point2D<span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> Point2D<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">pow</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>x <span class=\"token operator\">-</span> b<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">pow</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>y <span class=\"token operator\">-</span> b<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위 예제는 x, y의 타입을 정리한 오브젝트 타입이 반복되는 상황이다. 이점을 해결하기 위해 <code class=\"language-text\">Point2D</code>로 interface를 정의해 서로 다르게 정해져있던 타입을 하나로 정리해줄 수 있다. 이러한 방법은 앞서 정리한 함수 표현식으로 매개변수와 반환 값의 타입을 정리했던 것과 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// 네이밍 전</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>url<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> opts<span class=\"token operator\">:</span> Options<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span>Response<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">post</span><span class=\"token punctuation\">(</span>url<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> opts<span class=\"token operator\">:</span> Options<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span>Response<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 네이밍 후</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">HTTPFunction</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>url<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span> opts<span class=\"token operator\">:</span> Options<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span>Response<span class=\"token operator\">></span>\n<span class=\"token keyword\">const</span> get<span class=\"token operator\">:</span> <span class=\"token function-variable function\">HTTPFunction</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> opts<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> post<span class=\"token operator\">:</span> <span class=\"token function-variable function\">HTTPFunction</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> opts<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre></div>\n<h3>2. extends와 intersection 연산자 (&#x26;)</h3>\n<p>하나의 타입이 있고 해당 타입의 속성에 다른 속성을 추가한 타입을 만들 때 새롭게 만들기 보다 앞서 배웠던 <code class=\"language-text\">extends</code>와 <code class=\"language-text\">&amp;</code>를 이용해 속성을 추가할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// 변경 전</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  firstName<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  lastName<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">PersonWithBirthDate</span> <span class=\"token punctuation\">{</span>\n  firstName<span class=\"token operator\">:</span> String\n  lastName<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  birth<span class=\"token operator\">:</span> Date\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 변경 후</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  firstName<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  lastName<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">PersonWithBirthDate</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  birth<span class=\"token operator\">:</span> Date\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">PersonWithBirthDate</span> <span class=\"token operator\">=</span> Person <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">{</span> birth<span class=\"token operator\">:</span> Date <span class=\"token punctuation\">}</span></code></pre></div>\n<h3>3. 부분 타입</h3>\n<p>기존에 정의한 타입의 일부분 속성을 정의할 때 새롭게 정의하고 확장해서 사용했다. 하지만 논리적으로 맞지 않다고 느낀 적이 많았는데 책에서는 <code class=\"language-text\">인덱싱</code>을 이용해 중복을 제거하는 방법을 제시한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">State</span> <span class=\"token punctuation\">{</span>\n  userId<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  pageTitle<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  recentFiles<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  pageContents<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">TopNavState</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  userId<span class=\"token operator\">:</span> State<span class=\"token punctuation\">[</span><span class=\"token string\">\"userId\"</span><span class=\"token punctuation\">]</span>\n  pageTitle<span class=\"token operator\">:</span> State<span class=\"token punctuation\">[</span><span class=\"token string\">\"pageTitle\"</span><span class=\"token punctuation\">]</span>\n  recentFiles<span class=\"token operator\">:</span> State<span class=\"token punctuation\">[</span><span class=\"token string\">\"recentFiles\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위 방법을 이용하면 부분 타입을 정의할 수 있다. 하지만 일일이 속성을 나열해 반복되는 부분이 있다. 이점을 해결하기 위해 <code class=\"language-text\">mapping</code>을 이용할 수 있다,</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">TopNavState</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span>k <span class=\"token keyword\">in</span> <span class=\"token string\">\"userId\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"pageTitle\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"recentFiles\"</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> State<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">TopNavState</span> <span class=\"token operator\">=</span> Pick<span class=\"token operator\">&lt;</span>State<span class=\"token punctuation\">,</span> <span class=\"token string\">\"userId\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"pageTitle\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"recentFiles\"</span><span class=\"token operator\">></span>\n<span class=\"token comment\">//  type Pick&lt;T, K extends keyof T> = {</span>\n<span class=\"token comment\">//     [P in K]: T[P];</span>\n<span class=\"token comment\">// };</span></code></pre></div>\n<p>위 예시의 첫 번째는 <code class=\"language-text\">mapping</code>을 이용해 반복되는 속성 key를 순회하며 State에 대입한 값의 타입을 받아와 코드 중복을 제거했다. 이러한 <code class=\"language-text\">mapping</code>은 유틸타입<code class=\"language-text\">Pick</code>으로 정의되어 있어 두 번째 예제로 좀 더 편하게 나타낼 수 있다. <code class=\"language-text\">Pick</code>을 사용할 때는 먼저 참조할 Type을 가져오고 해당 타입에서 가져올 key값을 두 번째 인자로 전달한 Generic을 이용해 나타낼 수 있다.</p>\n<p><code class=\"language-text\">Pick</code> util type은 유용하지만 조심해야 할 부분은 객체 type을 정의한다는 점이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">SaveAction</span> <span class=\"token punctuation\">{</span>\n  type<span class=\"token operator\">:</span> <span class=\"token string\">\"save\"</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">LoadAction</span> <span class=\"token punctuation\">{</span>\n  type<span class=\"token operator\">:</span> <span class=\"token string\">\"load\"</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Action</span> <span class=\"token operator\">=</span> SaveAction <span class=\"token operator\">|</span> LoadAction\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">ActionType</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"save\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"load\"</span></code></pre></div>\n<p>위 예제에서 <code class=\"language-text\">ActionType</code>은 이미 정의한 <code class=\"language-text\">'save'</code>와 <code class=\"language-text\">'load'</code>를 다시 적어 코드 중복이 발생했다. 이점을 해결하기 위해서 <code class=\"language-text\">Pick</code>을 이용하면 될 것 같지만 이때는 <code class=\"language-text\">mapping</code>을 이용하는 것이 의도에 더 맞다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">ActionType</span> <span class=\"token operator\">=</span> Action<span class=\"token punctuation\">[</span><span class=\"token string\">\"type\"</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">//'save' | 'load';</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">ActionRec</span> <span class=\"token operator\">=</span> Pick<span class=\"token operator\">&lt;</span>Action<span class=\"token punctuation\">,</span> <span class=\"token string\">\"type\"</span><span class=\"token operator\">></span> <span class=\"token comment\">// {type:'save' | 'load'}</span></code></pre></div>\n<h3>4. keyof 와 Partial util 타입</h3>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Options</span> <span class=\"token punctuation\">{</span>\n  width<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n  height<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n  color<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  label<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">OptionUpdate</span> <span class=\"token punctuation\">{</span>\n  width<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n  height<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n  color<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  label<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">UIWidget</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>init<span class=\"token operator\">:</span> Options<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n  <span class=\"token function\">update</span><span class=\"token punctuation\">(</span>options<span class=\"token operator\">:</span> OptionUpdate<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위 예제는 <code class=\"language-text\">Options</code>와 동일한 key를 가진 <code class=\"language-text\">OptionUpdate</code>타입을 정의하는데 선택적으로 만들기 위해 새롭게 정의한 것을 볼 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">OptionsUpdate</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>k <span class=\"token keyword\">in</span> <span class=\"token keyword\">keyof</span> Options<span class=\"token punctuation\">]</span><span class=\"token operator\">?</span><span class=\"token operator\">:</span> Options<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">UIWidget</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>init<span class=\"token operator\">:</span> Options<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n  <span class=\"token function\">update</span><span class=\"token punctuation\">(</span>options<span class=\"token operator\">:</span> Partial<span class=\"token operator\">&lt;</span>Options<span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// type Partial&lt;T> = {</span>\n<span class=\"token comment\">//   [P in keyof T]?: T[P];</span>\n<span class=\"token comment\">// };</span></code></pre></div>\n<p>위 예제를 보면 <code class=\"language-text\">keyof</code>를 이용해 <code class=\"language-text\">Options</code>의 key들을 받아오고 새롭게 정의해 코드 중복을 제거했다. key들을 모두 선택적으로 만들기 위해 utilType <code class=\"language-text\">Partial</code>이 존재한다. <code class=\"language-text\">Partial</code>의 정의를 보면 앞서 <code class=\"language-text\">keyof</code>를 그대로 사용한 것을 볼 수 있다.</p>\n<h3>5. typeof</h3>\n<p><code class=\"language-text\">typeof</code>는 원시값의 타입을 정의하고 재 사용할 때 요즘 가장 많이 사용하는 연산자인 것 같다. <code class=\"language-text\">typeof</code>는 원시 값 뿐만 아니라 값에 대해 알고 있을 때 해당 값의 타입을 정의할 때 간단하게 사용할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// typeof 전</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">INIT_OPTIONS</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  width<span class=\"token operator\">:</span> <span class=\"token number\">640</span><span class=\"token punctuation\">,</span>\n  height<span class=\"token operator\">:</span> <span class=\"token number\">40</span><span class=\"token punctuation\">,</span>\n  color<span class=\"token operator\">:</span> <span class=\"token string\">\"s\"</span><span class=\"token punctuation\">,</span>\n  label<span class=\"token operator\">:</span> <span class=\"token string\">\"s\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">OPtions</span> <span class=\"token punctuation\">{</span>\n  width<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n  height<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n  color<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  label<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// typeof 후</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">OPtions</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span> <span class=\"token constant\">INIT_OPTIONS</span> <span class=\"token comment\">// { width: number; height: number; color: string;label: string; }</span></code></pre></div>\n<p>함수의 경우 반환 값의 타입을 정의하고 싶을 때 <code class=\"language-text\">typeof</code>와 utiltype <code class=\"language-text\">ReturnType</code>을 이용할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token function\">getUserInfo</span><span class=\"token punctuation\">(</span>userId<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    userId<span class=\"token punctuation\">,</span>\n    name<span class=\"token punctuation\">,</span>\n    age<span class=\"token punctuation\">,</span>\n    height<span class=\"token punctuation\">,</span>\n    weight<span class=\"token punctuation\">,</span>\n    favoriteColor<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">UserInfo</span> <span class=\"token operator\">=</span> ReturnType<span class=\"token operator\">&lt;</span><span class=\"token keyword\">typeof</span> getUserInfo<span class=\"token operator\">></span>\n<span class=\"token comment\">// type ReturnType&lt;T extends (...args: any) => any> = T extends (...args: any) => infer R ? R : any;</span></code></pre></div>\n<p><code class=\"language-text\">ReturnType</code>의 정의의 조건부 부분이 아직 이해가 되지 않아 이후에 한번 더 볼 필요가 있을 것 같다.</p>\n<p>제네릭은 타입을 유연하게 사용할 수 있는 장점을 가지지만 유연성은 <code class=\"language-text\">범위</code>가 중요하다. 이러한 범위를 정의해주지 않는다면 타입을 정의해주기 전과 같아질 수 있으므로 <code class=\"language-text\">extends</code>와 <code class=\"language-text\">keyof</code>와 같은 연산자를 이용해 범위를 명시적으로 정해 줄 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Pick<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">K</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span>k <span class=\"token keyword\">in</span> <span class=\"token constant\">K</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token comment\">// This type parameter might need an `extends string | number | symbol` constraint.</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Pick<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">K</span> <span class=\"token keyword\">extends</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span>k <span class=\"token keyword\">in</span> <span class=\"token constant\">K</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token constant\">K</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위의 예제는 k의 범위를 몰라 에러가 발생했지만 <code class=\"language-text\">extends</code>와 <code class=\"language-text\">keyof</code>를 이용해 key값의 타입으로 정의해 해결할 수 있다.</p>\n<h2>😃 인덱스 시그니처</h2>\n<p><code class=\"language-text\">인덱스 시그니처</code>는 사용하면서 어려운 부분 중 하나였다. 구체적인 타입을 지정하지 못하기 때문에 <code class=\"language-text\">Object.keys</code>와 같이 배열로 나열하는 방식에 어려움을 겪었다. 이번 기회를 통해 좀 더 제대로 이해하고 사용하고자 했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Rocket</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>property<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<p>위 예제에서 key를 정확히 명시하지 않기 때문에 자동 완성의 도움을 받을 수 없고, value의 타입이 string이 아니라 다른 타입을 가질 수 없는 단점을 가진다. 그렇기 때문에 보다 정확하게 type을 정의할 필요가 있다.</p>\n<p>그러면 <code class=\"language-text\">인덱스 시그니처</code>는 <strong>어디에</strong> 쓰여야 할까? <code class=\"language-text\">인덱스 시그니처</code>는 동적데이터를 표현할 때 사용되어야 한다. 미리 알 수 없는 데이터를 받아 와야 할 때 사용할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token function\">parseCSV</span><span class=\"token punctuation\">(</span>input<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>columnName<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> lines <span class=\"token operator\">=</span> input<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>header<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>rows<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> lines\n  <span class=\"token keyword\">const</span> headerColumns <span class=\"token operator\">=</span> header<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> rows<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>rowStr <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> row<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>columnName<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    rowStr<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>cell<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      row<span class=\"token punctuation\">[</span>headerColumns<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> cell\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> row\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>실제로 사용할 값에 대해서 알 수 없을 때 사용하는 것이 <code class=\"language-text\">인덱스 시그니처</code>의 본질이므로 내가 사용했던 방식은 잘못된 방식이었음을 깨달을 수 있었다.</p>\n<p><code class=\"language-text\">인덱스 시그니처</code>는 string타입으로 광범위하므로 대체할 수 있는 방법들이 존재한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Vec3D</span> <span class=\"token operator\">=</span> Record<span class=\"token operator\">&lt;</span><span class=\"token string\">\"x\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"y\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"z\"</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">number</span><span class=\"token operator\">></span>\n<span class=\"token comment\">// type Record&lt;K extends keyof any, T> = {</span>\n<span class=\"token comment\">//     [P in K]: T;</span>\n<span class=\"token comment\">// };</span></code></pre></div>\n<p><code class=\"language-text\">Record</code> utilType은 key의 타입을 유연하게 해주면서도 범위를 정해 줄 수 있다.</p>\n<h2>🚅 Array, Tuple, ArrayLike</h2>\n<p>배열은 <strong>오브젝트</strong>다. 그렇기 때문에 오브젝트를 사용하듯 문자열 key로 배열 요소에 접근할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> xs <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">const</span> x0 <span class=\"token operator\">=</span> xs<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">const</span> x1 <span class=\"token operator\">=</span> xs<span class=\"token punctuation\">[</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x1<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 2</span></code></pre></div>\n<p>타입스크립트의 <code class=\"language-text\">Array</code>는 숫자 키만을 허용하고 문자열 키는 다르게 인식해 key type을 하나로 정해 준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">get</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>array<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> k<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> array<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token comment\">// Element implicitly has an 'any' type because index expression is not of type 'number'.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>실제 런타임은 문자열 키로 인식하지만 타입 체크를 통해 오류를 잡을 수 있는 장점을 가질 수 있다. 책을 읽으면서 어떻게 적용하면 좋을지 고민을 해봤지만, 일단은 이러한 부분이 있구나 이해하고 넘어가서 나중에 다시 보기로 생각했다.</p>\n<h2>😁 Readonly</h2>\n<p><code class=\"language-text\">Readonly</code>는 말 그대로 읽기만 가능하게 해줄 수 있는 연산자로 해당 변수를 변화시키는 것에 에러를 던지게 해 원본을 보존하는 데 도움을 준다. 이러한 점이 중요한 것은 <code class=\"language-text\">call by reference</code>를 고려해 객체 타입의 매개변수를 다뤄야 함수로 인한 side-effect를 막을 수 있기 때문이다. 객체의 경우에 원본의 값이 들어오는 것이 아니라 reference값이 전달되기 때문에 함수 내부에서 변화시킨다면 원본에 변화가 생기는 문제점이 생긴다.</p>\n<p>이러한 문제점을 막을 수 있는 방법이 바로 <code class=\"language-text\">readonly</code>연산자다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token function\">arraySum</span><span class=\"token punctuation\">(</span>arr<span class=\"token operator\">:</span> <span class=\"token keyword\">readonly</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    num\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!==</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Property 'pop' does not exist on type 'readonly number[]'.</span>\n    sum <span class=\"token operator\">+=</span> num\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> sum\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위의 예제는 <code class=\"language-text\">pop</code>과 같이 원본 요소를 바꾸는 메소드를 호출할 수 없기 때문에 생긴 에러로 함수 내에서 매개변수 내부의 변화가 생기지 않게 막는다. <code class=\"language-text\">readonly</code>배열에 변경 가능한 배열을 할당할 수 있지만, 반대는 되지 않는 특징을 가진다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// 변경 전</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">parseTaggedText</span><span class=\"token punctuation\">(</span>lines<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> paragraphs<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">const</span> currPara<span class=\"token operator\">:</span> <span class=\"token keyword\">readonly</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">addParagraph</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>currPara<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      paragraphs<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>currPara<span class=\"token punctuation\">)</span> <span class=\"token comment\">//readonly string[]' is 'readonly' and cannot be assigned to the mutable type 'string[]'</span>\n      currPara<span class=\"token punctuation\">.</span>length <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> line <span class=\"token keyword\">of</span> lines<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>line<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">addParagraph</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      currPara<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">addParagraph</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> paragraphs\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>앞서 말했던 대로 <code class=\"language-text\">readonly</code>배열은 변경 가능한 배열에 할당할 수 없어 에러가 발생한 것을 볼 수 있다. 이렇게 원본을 훼손하지 않고 사용하기 위해서는 앞서 리액트를 공부하며 정리한 <code class=\"language-text\">불변성</code>을 지켜주면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token function\">parseTaggedText</span><span class=\"token punctuation\">(</span>lines<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> paragraphs<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">let</span> currPara<span class=\"token operator\">:</span> <span class=\"token keyword\">readonly</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">addParagraph</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>currPara<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      paragraphs<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>currPara<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 얕은 복사로 새로운 배열을 만들어</span>\n      currPara <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> line <span class=\"token keyword\">of</span> lines<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>line<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">addParagraph</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      currPara <span class=\"token operator\">=</span> currPara<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>line<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">addParagraph</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> paragraphs\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>Readonly util 타입</h3>\n<p><code class=\"language-text\">Readonly</code> util 타입은 객체의 속성을 readonly로 만들어준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> o<span class=\"token operator\">:</span> Readonly<span class=\"token operator\">&lt;</span>Outer<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> inner<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> x<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span>\no<span class=\"token punctuation\">.</span>inner <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> x<span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span> <span class=\"token comment\">// Cannot assign to 'inner' because it is a read-only property.</span>\n\n<span class=\"token comment\">// type Readonly&lt;T> = {</span>\n<span class=\"token comment\">//   readonly [P in keyof T]: T[P];</span>\n<span class=\"token comment\">// };</span></code></pre></div>\n<h2>😏 Mapping된 타입을 이용해 값 동기화하기</h2>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">ScatterProps</span> <span class=\"token punctuation\">{</span>\n  xs<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  ys<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  xRange<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">]</span>\n  yRange<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">]</span>\n  color<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  <span class=\"token function-variable function\">onClick</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> index<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">shouldUpdate</span><span class=\"token punctuation\">(</span>oldProps<span class=\"token operator\">:</span> ScatterProps<span class=\"token punctuation\">,</span> newProps<span class=\"token operator\">:</span> ScatterProps<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> k<span class=\"token operator\">:</span> <span class=\"token keyword\">keyof</span> ScatterProps\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>k <span class=\"token keyword\">in</span> oldProps<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>oldProps<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">!==</span> newProps<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>k <span class=\"token operator\">!==</span> <span class=\"token string\">\"onClick\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위 예제에서 <code class=\"language-text\">ScatterProps</code> interface를 이용해서 현재 Props와 newProps를 비교해 props가 변경될 경우 지도를 다시 그리는 예제를 담고 있다. 실제 리액트에서 컴포넌트가 re-rendering되는 조건 중 하나가 props나 상태가 바뀌는 경우로 기존 props와의 차이를 <code class=\"language-text\">얕은 비교</code>를 통해 비교한다.</p>\n<p>현재 정의된 shouldUpdate에서 <code class=\"language-text\">onClick</code>함수 변화는 업데이트에 영향을 주지 않게 설정되어 있다. 하지만 만약 새로운 속성이 추가되는 경우에 항상 true이기 때문에 너무 자주 새로 그려지게 된다. 이점을 막기 위해서 다음과 같은 코드로 수정할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token function\">shouldUpdate</span><span class=\"token punctuation\">(</span>oldProps<span class=\"token operator\">:</span> ScatterProps<span class=\"token punctuation\">,</span> newProps<span class=\"token operator\">:</span> ScatterProps<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    oldProps<span class=\"token punctuation\">.</span>xs <span class=\"token operator\">!==</span> newProps<span class=\"token punctuation\">.</span>xs <span class=\"token operator\">||</span>\n    oldProps<span class=\"token punctuation\">.</span>ys <span class=\"token operator\">!==</span> newProps<span class=\"token punctuation\">.</span>ys <span class=\"token operator\">||</span>\n    oldProps<span class=\"token punctuation\">.</span>xRange <span class=\"token operator\">!==</span> newProps<span class=\"token punctuation\">.</span>xRange <span class=\"token operator\">||</span>\n    oldProps<span class=\"token punctuation\">.</span>yRange <span class=\"token operator\">!==</span> newProps<span class=\"token punctuation\">.</span>yRange <span class=\"token operator\">||</span>\n    oldProps<span class=\"token punctuation\">.</span>color <span class=\"token operator\">!==</span> newProps<span class=\"token punctuation\">.</span>color\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위 코드는 일일이 속성들의 변화를 체크하는 방식으로 매번 새로운 속성이 추가될 때마다 작성해 주어야 하므로 비효율적이다.</p>\n<p>좀 더 이상적인 방법은 새로운 속성이 추가될 때 타입체커와 매핑된 타입,객체를 이용하는 코드다. 다음 예제를 보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> <span class=\"token constant\">REQUIRES_UPDATE</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>k <span class=\"token keyword\">in</span> <span class=\"token keyword\">keyof</span> ScatterProps<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  xs<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  ys<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  xRange<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  yRange<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  color<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  onClick<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">shouldUpdate</span><span class=\"token punctuation\">(</span>oldProps<span class=\"token operator\">:</span> ScatterProps<span class=\"token punctuation\">,</span> newProps<span class=\"token operator\">:</span> ScatterProps<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> k<span class=\"token operator\">:</span> <span class=\"token keyword\">keyof</span> ScatterProps\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>k <span class=\"token keyword\">in</span> oldProps<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>oldProps<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">!==</span> newProps<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token constant\">REQUIRES_UPDATE</span><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>keyof를 이용해 Update가 필요한 속성들에 대해 명시해두고, true로 설정해놓은 속성이 변화했을 때만 업데이트될 수 있게 정의했다. 타입과 값이 동기화 되어 있기 때문에 새로운 속성이 추가되어도 바로 에러가 발생해 알려줄 수 있다.</p>","frontmatter":{"title":"TS study: 타입 시스템 (3)","date":"January 16, 2023","tags":["typescript"],"series":"Typescript"},"fields":{"slug":"/2023-01-16-타입시스템-3/","readingTime":{"minutes":17.26}}},"seriesList":{"edges":[{"node":{"id":"e4afb978-51d0-558a-8fac-8eb97d2a2763","fields":{"slug":"/2023-01-02-타입스크립트란/"},"frontmatter":{"title":"TS study: 타입스크립트란"}}},{"node":{"id":"bb1c9c90-fc11-564c-b727-6c9928d01454","fields":{"slug":"/2023-01-07-타입시스템-1/"},"frontmatter":{"title":"TS study: 타입시스템 (1)"}}},{"node":{"id":"45594d13-5cde-58b7-becf-86a6f7ad0569","fields":{"slug":"/2023-01-10-타입시스템-2/"},"frontmatter":{"title":"TS study: 타입 시스템 (2)"}}},{"node":{"id":"c5af547a-22ba-513d-ad11-390454722177","fields":{"slug":"/2023-01-16-타입시스템-3/"},"frontmatter":{"title":"TS study: 타입 시스템 (3)"}}},{"node":{"id":"9f936319-cd88-5b63-b39e-75df052551f4","fields":{"slug":"/2023-01-24-타입추론 (1)/"},"frontmatter":{"title":"TS study: 타입 추론(1)"}}},{"node":{"id":"80cde9be-da0c-5c6b-acc8-d45547b96aa0","fields":{"slug":"/2023-10-16-the_Basics/"},"frontmatter":{"title":"Typescript: The Basics"}}},{"node":{"id":"9910c49d-f3d2-5a90-894e-324c868332cf","fields":{"slug":"/2023-10-18-Narrowing/"},"frontmatter":{"title":"Typescript: Narrowing"}}},{"node":{"id":"228a2c10-6f85-5211-bd1e-5efa48a65e5c","fields":{"slug":"/2023-10-17-Everyday-Types/"},"frontmatter":{"title":"Typescript: EveryDay Types"}}},{"node":{"id":"4891d21f-441e-5651-a65d-a38aea282bfc","fields":{"slug":"/2023-10-23-MoreOnFunctions/"},"frontmatter":{"title":"Typescript: More On Functions"}}},{"node":{"id":"c2a60f21-344c-5617-9e23-098da34ba0ab","fields":{"slug":"/2023-10-31-Object-Types/"},"frontmatter":{"title":"Typescript: Object Types"}}},{"node":{"id":"0f40ef0b-b850-516a-9f30-5b7e0a8896c3","fields":{"slug":"/2023-11-07-Generics/"},"frontmatter":{"title":"Typescript: Generics"}}},{"node":{"id":"d6ab523a-3829-5c6a-a25e-50d272e4823d","fields":{"slug":"/2023-11-16-keyof,typeof, indexed Access Types/"},"frontmatter":{"title":"Typescript: Keyof, TypeOf, Indexed"}}},{"node":{"id":"7a9a6af1-4b1e-5433-bb68-e8ae4c84e2c0","fields":{"slug":"/2023-12-19-conditional-types/"},"frontmatter":{"title":"Typescript: Conditional Types"}}}]},"previous":{"fields":{"slug":"/2023-01-10-타입시스템-2/"},"frontmatter":{"title":"TS study: 타입 시스템 (2)"}},"next":{"fields":{"slug":"/2023-01-23-Vite와-번들러/"},"frontmatter":{"title":"Vite는 왜 빠를까, 번들러에 대한 정리"}}},"pageContext":{"id":"c5af547a-22ba-513d-ad11-390454722177","series":"Typescript","previousPostId":"45594d13-5cde-58b7-becf-86a6f7ad0569","nextPostId":"fe5c6476-9c85-50cc-938a-137246b45864"}},"staticQueryHashes":[],"slicesMap":{}}