{"componentChunkName":"component---src-templates-post-jsx","path":"/2022-12-09-this/","result":{"data":{"site":{"siteMetadata":{"title":"Troy DevLog"}},"markdownRemark":{"id":"72347779-5753-5035-b978-e4569b4f14cf","excerpt":"👉 This 자바스크립트에서 this는 \"동적\"으로 정해진다라고 한다. 기존 객체지향 언어들과는 다르게 작동하는 자바스크립트의 this에 대해 정리해 보려 한다. 🙋‍♂️ This란 this는 자신이 속한 객체 또는 만들어 질 인스턴스를 가리키는 변수이다. 이해를 위해 다음 코드를 보자 square 객체의 getArea 메소드는 distance를 이용해 넓이를…","html":"<h1>👉 This</h1>\n<p>자바스크립트에서 this는 \"동적\"으로 정해진다라고 한다. 기존 객체지향 언어들과는 다르게 작동하는 자바스크립트의 this에 대해 정리해 보려 한다.</p>\n<h2>🙋‍♂️ This란</h2>\n<p>this는 <strong>자신이 속한 객체 또는 만들어 질 인스턴스를 가리키는 변수</strong>이다. 이해를 위해 다음 코드를 보자</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> square <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">distance</span><span class=\"token operator\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">getArea</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> square<span class=\"token punctuation\">.</span>distance <span class=\"token operator\">**</span> <span class=\"token number\">2</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>square<span class=\"token punctuation\">.</span><span class=\"token function\">getArea</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>square 객체의 getArea 메소드는 distance를 이용해 넓이를 계산한다. 이때 중요한 것은 square가 가지고 있는 속성인 <code class=\"language-text\">distance</code>값이 필요하다는 점이다. 객체를 선언한 변수 square를 입력하면 distance를 사용할 수는 있지만, 항상 객체를 선언한 식별자를 이용한다면 오직 square라는 이름의 객체에서만 사용이 가능해 재사용성이 떨어지게 된다.</p>\n<p>이러한 재사용성을 고려해 객체가 어떻게 선언되는지에 상관없이, 어떤 이름의 인스턴스인지 상관없이 <strong>항상 자기 자신을 참조할 수 있는 변수</strong>가 바로 this라고 이해할 수 있다.</p>\n<p>위를 객체 리터럴, 생성자함수, class로 다음과 같이 표현할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> square1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">distance</span><span class=\"token operator\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">getArea</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>distance <span class=\"token operator\">**</span> <span class=\"token number\">2</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">ProtoSquare</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">distance</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>distance <span class=\"token operator\">=</span> distance\n<span class=\"token punctuation\">}</span>\n<span class=\"token class-name\">ProtoSquare</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getArea</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>distance <span class=\"token operator\">**</span> <span class=\"token number\">2</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> square2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ProtoSquare</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>square2<span class=\"token punctuation\">.</span><span class=\"token function\">getArea</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ClassSquare</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">distance</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>distance <span class=\"token operator\">=</span> distance\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">getArea</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>distance <span class=\"token operator\">**</span> <span class=\"token number\">2</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> square3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ClassSquare</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>square3<span class=\"token punctuation\">.</span><span class=\"token function\">getArea</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>이러한 this는 \"어떻게\" 결정되는 걸까?</p>\n<h2>👍 this가 결정되는 방식</h2>\n<p>this는 함수가 어떻게 <code class=\"language-text\">호출되느냐</code>에 따라 동적으로 결정되는데, this 바인딩에는 4가지 규칙이 있다. 4가지 규칙에 대해 알아보자.</p>\n<h3>1) 기본바인딩</h3>\n<p>객체의 메소드나 생성자 함수를 제외한 함수들, 일반함수로 함수 내부에서 this를 호출하면 <code class=\"language-text\">전역객체</code>를 얻을 수 있다. 전역객체는 브라우저냐 Node.js냐에 따라 각각 window와 global을 의미한다. 브라우저 기준으로 전역객체는 window로 설명을 진행하려 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">hi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//window 또는 global</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">hi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>이때 메소드 내부 중첩 함수나 콜백함수가 일반함수로 호출될 경우에도 동일하게 전역 객체로 this 바인딩이 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> value <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// window</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">too</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// window</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> value <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">too</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"use strict\"</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// undefined</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Uncaught TypeError: Cannot read properties of undefined</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\nobj<span class=\"token punctuation\">.</span><span class=\"token function\">too</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>이때 use strict로 엄격모드를 적용하면 전역객체는 기본 바인딩에서 제외되어 this.value는 에러를 던지게 된다.</p>\n<h3>2) 암시적 바인딩</h3>\n<p>호출할 때의 객체의 존재 여부에 따라, this는 만들어진 객체에 속해지지 않고, <code class=\"language-text\">호출한 객체, 컨텍스트 객체</code>에 바인딩된다. 이것을 <strong>암시적 바인딩</strong>이라 하는데 이해를 위해 다음 예제를 보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"lee\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//lee</span>\n\n<span class=\"token keyword\">const</span> anotherPerson <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"kim\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\nanotherPerson<span class=\"token punctuation\">.</span>getName <span class=\"token operator\">=</span> person<span class=\"token punctuation\">.</span>getName\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>anotherPerson<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//kim</span>\n\n<span class=\"token keyword\">const</span> getName <span class=\"token operator\">=</span> person<span class=\"token punctuation\">.</span>getName\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// window</span></code></pre></div>\n<p>위의 코드를 보면 getName이 <strong>함수가 사용되는 곳에 따라 this가 달라진다</strong>. 객체에서 선언된 this라면 해당 객체와 binding이 되어야 하지만, 호출하는 객체가 누구냐에 따라 달라지는 결과를 보여준다. 그렇기 때문에 함수가 가리키는 객체는 독립적인 <code class=\"language-text\">컨텍스트 객체</code>라고 볼 수 있다. 이러한 결과는 함수의 컨텍스트는 함수가 실행될 때 만들어지고, 만들어지는 과정에서 this가 바인딩되기 때문에 그때의 컨텍스트 객체가 this에 바인딩된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">text</span><span class=\"token operator\">:</span> <span class=\"token string\">\"영준\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">foo</span><span class=\"token operator\">:</span> foo<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">text</span><span class=\"token operator\">:</span> <span class=\"token string\">\"가영\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> name<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\nperson<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>만약 중첩된 상태에서 호출하게 된다면 가장 가까운 객체, name을 암시적으로 컨텍스트 객체로 바인딩한다.</p>\n<p>이렇게 어디서 호출하냐에 따라 달라지면 예측하기 어렵고 에러가 발생할 수 있다. this binding을 우리가 정하는 방법은 없을까?</p>\n<h3>3) 명시적 바인딩</h3>\n<p>this binding을 명시적으로 정해주는 방식에는 apply, call, bind 메소드를 사용하는 방법이 있다.</p>\n<h4>apply와 call</h4>\n<p>두 가지 메소드는 사용 시 전달한 객체를 this에 바인딩하고, 호출한다. 두가지 메소드의 차이점은 함수에 인자를 전달하는 방식에 있다. apply는 배열로 인자를 전달하고 call은 하나 하나씩 전달하고 호출한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">getThisBinding</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> thisArg <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">getThisBinding</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">getThisBinding</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>thisArg<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//[1, 2, 3]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">getThisBinding</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>thisArg<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//[1,2,3]</span></code></pre></div>\n<h4>bind</h4>\n<p>bind는 this만 바인딩하고 호출은 하지 않는다. 콜백함수나 중첩함수가 일반함수로 호출되었을 때, this가 달라지는 문제를 명시적으로 해결해 줄 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"lee\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token function\">callback</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\nperson<span class=\"token punctuation\">.</span><span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span> <span class=\"token comment\">//lee</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3>4) new 바인딩</h3>\n<p>생성자함수 내부의 this는 인스턴스가 바인딩된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"영준\"</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">callName</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> bar <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"주희\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> x <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nx<span class=\"token punctuation\">.</span><span class=\"token function\">callName</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>bar<span class=\"token punctuation\">)</span>\nx<span class=\"token punctuation\">.</span><span class=\"token function\">callName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 영준</span></code></pre></div>\n<p>생성자 함수를 이용해 만든 x 객체에 명시적 바인딩인 bind로 bar를 바인딩하려했지만, new 바인딩이 우선순위가 높아 \"영준\"으로 나온 것을 볼 수 있다.</p>\n<h3>🔼 예외적인 바인딩: 화살표 함수</h3>\n<p>앞서 설명한 this 바인딩과는 다르게 작용한다.화살표 함수는 함수 자체가 this를 갖지 않아 함수 선언 시의 <strong>상위 스코프의 this를 바인딩</strong>한다. 항상 this를 보장하기 때문에 callback함수에서 주로 사용된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> bar <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"영준\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">foo</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>bar<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 영준</span></code></pre></div>\n<p>위의 예시를 보면 setTimeOut 콜백함수의 this는 foo의 this를 참조하는데 현재 call을 이용해 bar로 바인딩되어 결과가 철수로 나타난 것을 볼 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> foo <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"영준\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">bar</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\nfoo<span class=\"token punctuation\">.</span><span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// undefined</span>\n\n<span class=\"token keyword\">const</span> boo <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"영준\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">far</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\nboo<span class=\"token punctuation\">.</span><span class=\"token function\">far</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//영준</span></code></pre></div>\n<p>하지만 주의할 점은 메소드를 화살표함수로 만들게 되면 foo 객체가 아니라 상위 스코프의 this인 전역객체를 binding하게 된다. 그렇기 때문에 메소드는 메소드 축약으로 정의하는 게 낫다는 것을 알 수 있다. 여기서 헷갈렸던 것은 bar라는 메소드를 함수 스코프로 생각해야 하는지 여부였다. 메소드는 결국 객체의 키와 연결된 함수의 참조값이므로 이것 자체가 함수 스코프를 가지진 않아 위와 같은 결과를 갖는 것을 볼 수 있다.</p>\n<h2>마치며</h2>\n<p>this 바인딩은 예상치 못하는 에러를 만들 수 있기 때문에 꼭 한번 정리를 하고 넘어가야 했다. 아직 화살표 함수에서 마지막 부분이 왜 전역객체를 바인딩하는지 잘 이해가 되지 않아 생성자함수와 prototype에 대해서 정리하고 다시한번 확인을 해보려고 한다.</p>\n<p>[참고]</p>\n<p><a href=\"http://www.yes24.com/Product/Goods/92742567\">모던 자바스크립트 딥다이브</a>\n<a href=\"https://doqtqu.tistory.com/307#2.2.%20Binding%20%EA%B7%9C%EC%B9%99\">this 바인딩</a></p>","frontmatter":{"title":"this","date":"December 09, 2022","tags":["javascript","문법"],"series":null},"fields":{"slug":"/2022-12-09-this/","readingTime":{"minutes":9.92}}},"seriesList":{"edges":[{"node":{"id":"4dd6f66b-f311-5b91-9eac-28095d67106f","fields":{"slug":"/2022-09-06-BEM과-자료형/"},"frontmatter":{"title":"BEM과 자바스크립트의 자료형"}}},{"node":{"id":"484c98ee-5762-55db-84b4-6b21ae960acf","fields":{"slug":"/2022-09-07-자바스트립트의-두가지-복사방법/"},"frontmatter":{"title":"자바스크립트의 두가지 복사 방법"}}},{"node":{"id":"352ba125-5786-518a-9c7a-303042a0755f","fields":{"slug":"/2022-09-07-자바스크립트의-타입과연산자/"},"frontmatter":{"title":"자바스크립트의 타입과 연산자"}}},{"node":{"id":"10db5919-95c0-53f5-94be-dcbac01e5d37","fields":{"slug":"/2022-09-10-intersection-observer /"},"frontmatter":{"title":"Intersection observer"}}},{"node":{"id":"5b188256-9365-5320-a67f-97afab6d630f","fields":{"slug":"/2022-09-12-브라우저API/"},"frontmatter":{"title":"Browser API"}}},{"node":{"id":"db56d225-cd7a-5168-8079-35d6d038e94f","fields":{"slug":"/2022-09-13-함수/"},"frontmatter":{"title":"함수"}}},{"node":{"id":"80cd5d8e-ad25-5b3f-921a-53a5f16a9bd5","fields":{"slug":"/2022-09-14-객체/"},"frontmatter":{"title":"객체"}}},{"node":{"id":"44dc8bd6-7888-58d2-b3fb-124760fd2e55","fields":{"slug":"/2022-09-17-빌트인객체/"},"frontmatter":{"title":"빌트인 객체"}}},{"node":{"id":"75d48151-20bb-5d55-9b13-7c77c923e577","fields":{"slug":"/2022-09-19-array/"},"frontmatter":{"title":"Array"}}},{"node":{"id":"962839d3-d3ea-5820-a045-07d3cdaa0079","fields":{"slug":"/2022-09-22-iteration/"},"frontmatter":{"title":"Iteration"}}},{"node":{"id":"cd30073c-7f4c-54d8-b893-090480da82c3","fields":{"slug":"/2022-09-24-Map과Set/"},"frontmatter":{"title":"Map과 Set"}}},{"node":{"id":"900f53ea-b7eb-5996-b44b-626400cf9d87","fields":{"slug":"/2022-10-06-HTTP란/"},"frontmatter":{"title":"HTTP 정리"}}},{"node":{"id":"458970f3-d49a-5b5f-8975-6f084e4ab43b","fields":{"slug":"/2022-10-18-Node-JS-기초/"},"frontmatter":{"title":"Node js:NodeJS 이용한 서버 만들기"}}},{"node":{"id":"f0792841-794b-5ec0-a351-a2f7605adc40","fields":{"slug":"/2022-10-19-Express-기초/"},"frontmatter":{"title":"NodeJS: express"}}},{"node":{"id":"d2bb44f2-60ad-5ed7-90ab-2bf43c831572","fields":{"slug":"/2022-11-18-CSR과-SSR/"},"frontmatter":{"title":"CSR과 SSR 그리고 Universal Rendering"}}},{"node":{"id":"cb62a84f-d1d5-5894-8175-64624d84a372","fields":{"slug":"/2022-11-20-스코프-실행컨테스트-클로저/"},"frontmatter":{"title":"스코프,실행컨텍스트,클로저"}}},{"node":{"id":"3b08f6c0-b947-5562-b38c-1228108dd551","fields":{"slug":"/2022-11-24-Critical-Rendering-Path/"},"frontmatter":{"title":"💻 Critical Rendering Path"}}},{"node":{"id":"9735256f-9deb-5bc5-a7a3-9d68d3278b4a","fields":{"slug":"/2022-11-27-비동기와-프로미스/"},"frontmatter":{"title":"비동기와 프로미스"}}},{"node":{"id":"ce607981-e768-5fdf-96d7-5d026072082f","fields":{"slug":"/2022-11-30-지스트-청원-서비스-회고/"},"frontmatter":{"title":"지스트 청원서비스 회고"}}},{"node":{"id":"f6194d07-b810-5332-9cbc-da0ce80eb312","fields":{"slug":"/2022-12-02-제너레이터와-async-await/"},"frontmatter":{"title":"제너레이터와 Async-Await"}}},{"node":{"id":"ad48afd5-0612-56fe-a974-7edb7de83a74","fields":{"slug":"/2022-12-03-모으잡-리팩토링/"},"frontmatter":{"title":"모으잡-check box 수정, react-query 커스텀 훅, 크롤링 이슈"}}},{"node":{"id":"2776079b-37ef-5268-9738-de277120a7da","fields":{"slug":"/2022-12-05-호이스팅/"},"frontmatter":{"title":"호이스팅"}}},{"node":{"id":"01501fd0-6b11-5e0d-80ae-5f607d766625","fields":{"slug":"/2022-12-09-쿠키-session-jwt/"},"frontmatter":{"title":"Cookie,Session과 JWT"}}},{"node":{"id":"72347779-5753-5035-b978-e4569b4f14cf","fields":{"slug":"/2022-12-09-this/"},"frontmatter":{"title":"this"}}},{"node":{"id":"a64e2757-3cf3-5eb6-a560-d93cbc6b68b2","fields":{"slug":"/2022-12-10-http와https/"},"frontmatter":{"title":"http와 https"}}},{"node":{"id":"89b94977-8c1a-5723-af2b-1bf7c7750ebe","fields":{"slug":"/2022-12-12-생성자함수-프로토타입/"},"frontmatter":{"title":"생성자 함수, 프로토타입"}}},{"node":{"id":"5d40ad58-a897-564b-9a54-5c4a65ca9c0c","fields":{"slug":"/2022-12-30-이벤트/"},"frontmatter":{"title":"이벤트"}}},{"node":{"id":"93b78365-058d-511b-bb11-72485e3f0d70","fields":{"slug":"/2022-12-23-class/"},"frontmatter":{"title":"클래스"}}},{"node":{"id":"94db5333-429d-592a-a409-e8f0a0c76354","fields":{"slug":"/2023-01-23-리액트의-기본원리/"},"frontmatter":{"title":"React study: 리액트의 기본 원리"}}},{"node":{"id":"fe5c6476-9c85-50cc-938a-137246b45864","fields":{"slug":"/2023-01-23-Vite와-번들러/"},"frontmatter":{"title":"Vite는 왜 빠를까, 번들러에 대한 정리"}}},{"node":{"id":"80445e0b-511b-5e28-bde0-99498fbf3a5d","fields":{"slug":"/2022-12-20-리액트-성능보장/"},"frontmatter":{"title":"React study: 리액트가 성능을 보장하는 방법"}}},{"node":{"id":"782ca102-9c01-52ee-8b4d-b5432da4b448","fields":{"slug":"/2023-02-03-useState,useEffect, useRef, memo/"},"frontmatter":{"title":"React Study: useState, useEffect, useRef, memo"}}},{"node":{"id":"c1d41785-332b-595b-b9b8-0c7a719657c7","fields":{"slug":"/2023-02-17-취업준비-회고/"},"frontmatter":{"title":"신입으로 시작하며 작성하는 취준 회고"}}},{"node":{"id":"e06ed826-880e-5b59-ae78-c098858b0634","fields":{"slug":"/2023-02-21-google.com-입력했을때-일어나는-일/"},"frontmatter":{"title":"google.com를 브라우저에 검색했을 때 일어나는 일"}}},{"node":{"id":"aad7179c-dbc9-5851-a7fd-38251e0a508b","fields":{"slug":"/2023-03-01-CDN/"},"frontmatter":{"title":"CDN은 뭘까?"}}},{"node":{"id":"beed37b9-064d-581e-89d3-b4c43838e429","fields":{"slug":"/2023-03-05-디자인패턴/"},"frontmatter":{"title":"MVC, MVVM, Flux패턴 그리고 Service와 Repository 패턴"}}},{"node":{"id":"6f3b633d-c73e-5585-b597-edaa1d26c2bb","fields":{"slug":"/2023-03-31-2023년-3월회고/"},"frontmatter":{"title":"🐤 2023년 3월 회고"}}},{"node":{"id":"aed1969e-b959-5454-8c2f-52c4a0ec6e94","fields":{"slug":"/2023-05-06-2023년-4월회고/"},"frontmatter":{"title":"😎 2023년 4월 회고"}}},{"node":{"id":"a73d6084-a910-5da1-bcb0-f555558f6e3b","fields":{"slug":"/2023-06-05-2023년-5월회고/"},"frontmatter":{"title":"☀︎ 2023년 5월 회고"}}},{"node":{"id":"90c8982f-2982-5a80-bd85-6283a0f82d70","fields":{"slug":"/2023-07-06-2023년-6월회고/"},"frontmatter":{"title":"☼ 2023년 6월 회고"}}},{"node":{"id":"88fffefc-5bb1-5a85-b1aa-b0ac1d4bed94","fields":{"slug":"/2023-08-09-2023년-7월회고/"},"frontmatter":{"title":"☂︎ 2023년 7월 회고"}}},{"node":{"id":"e274816c-0eb9-5b42-93d0-823495b63d87","fields":{"slug":"/2023-09-09-2023년-8월회고/"},"frontmatter":{"title":"😊 2023년 8월 회고"}}},{"node":{"id":"0370cc06-a8be-5505-9714-383d053b476d","fields":{"slug":"/2023-10-03-2023년-9월회고/"},"frontmatter":{"title":"🚅 2023년 9월 회고"}}},{"node":{"id":"4eea6c19-13d8-5363-bc87-963f217b7a42","fields":{"slug":"/2023-11-01-2023년-10월회고/"},"frontmatter":{"title":"🧐 2023년 10월 회고"}}},{"node":{"id":"a2a6e999-a53d-5e52-aae6-d57a75673c5f","fields":{"slug":"/2023-12-02-2023년-11월회고/"},"frontmatter":{"title":"😃 2023년 11월 회고"}}},{"node":{"id":"ee90f174-21d6-5bbf-b2cf-6fd226bc9353","fields":{"slug":"/2023-12-31-2023년-12월회고/"},"frontmatter":{"title":"🌟 2023년 12월 회고"}}},{"node":{"id":"642af668-e5c7-501d-bbaa-7a7e0724a982","fields":{"slug":"/2024-02-07-2024년-1월회고/"},"frontmatter":{"title":"🐥 2024년 1월회고"}}},{"node":{"id":"f30aaeb4-d2ed-5b78-82cb-556facbdb597","fields":{"slug":"/2024-03-02-2024년-2월회고/"},"frontmatter":{"title":"🙊 2024년 2월회고"}}},{"node":{"id":"0a55cde5-eb6e-50ef-a0b9-3307863119d1","fields":{"slug":"/2024-03-03-자바스크립트의-동시성-이해하기/"},"frontmatter":{"title":"Promise.all의 동시성 이해하기"}}},{"node":{"id":"b8f3cba2-e71c-5b78-9eef-169fcdfde70f","fields":{"slug":"/2024-03-30-App-StartUp-time-개선/"},"frontmatter":{"title":"App StartUp time 개선"}}},{"node":{"id":"8ffb09b1-c80e-58a2-b89a-6e3c6729e89b","fields":{"slug":"/2024-04-07-2024년-3월회고/"},"frontmatter":{"title":"🙌 2024년 3월회고"}}},{"node":{"id":"67fd6178-63b4-5b39-8e3c-fb1b0c5db869","fields":{"slug":"/2024-04-21-onViewableItemsChanged-이해해보기/"},"frontmatter":{"title":"👀 onViewableItemsChanged 이해해보기"}}},{"node":{"id":"40a3836b-74fe-59bb-80a8-7d921608f55a","fields":{"slug":"/2024-05-01-2024년-4월회고/"},"frontmatter":{"title":"🙌 2024년 4월회고"}}},{"node":{"id":"6a36dcc8-a80b-5581-9649-954e0ad0c5eb","fields":{"slug":"/2024-06-01-2024년-5월회고/"},"frontmatter":{"title":"🙌 2024년 5월회고"}}},{"node":{"id":"39b77a6b-96d6-5c2e-9012-c6b6be81f72d","fields":{"slug":"/2024-06-02-에러바운더리-도입하기/"},"frontmatter":{"title":"✅ 에러바운더리 도입하기"}}},{"node":{"id":"f85b5d27-6e2c-5dd3-8ca4-1f8b70fb4815","fields":{"slug":"/2024-06-30-2024년-6월회고/"},"frontmatter":{"title":"🤭 2024년 6월회고"}}},{"node":{"id":"e4ae5f2a-10c8-58d3-bacb-6a25ce1b95fc","fields":{"slug":"/2024-06-30-NativeStack적용하기/"},"frontmatter":{"title":"🖥️ Native Stack 적용하기"}}},{"node":{"id":"36c25ccf-f28b-5447-9899-c3d0d414a44f","fields":{"slug":"/2024-08-03-2024년-7월회고/"},"frontmatter":{"title":"👏 2024년 7월회고 "}}},{"node":{"id":"e7ef6c08-c8ff-556b-8f64-b2e61225fa6f","fields":{"slug":"/2024-09-15-2024년-8월회고/"},"frontmatter":{"title":"🥳 2024년 8월회고 "}}},{"node":{"id":"7e844836-6a81-5bd8-a59f-4907b5d6fab3","fields":{"slug":"/2024-09-17-useFunnel-분석해보기/"},"frontmatter":{"title":"📚 useFunnel 분석하고 따라 만들어 보기"}}},{"node":{"id":"54a91c29-22f4-5ec0-ac9b-2902d00e195d","fields":{"slug":"/2024-09-25-로딩경험-개선/"},"frontmatter":{"title":"⏳ 로딩 경험 개선"}}},{"node":{"id":"5d3a72d4-3907-5696-ba59-56b475ad67af","fields":{"slug":"/2024-10-01-2024년-9월-회고/"},"frontmatter":{"title":"9️⃣ 2024년 9월 회고"}}},{"node":{"id":"6ce7e536-b3fc-556d-84f8-09e393e3180e","fields":{"slug":"/2024-10-25-숨고를-떠나며/"},"frontmatter":{"title":"10월 회고, 숨고를 떠나며"}}},{"node":{"id":"f3912500-0fb7-5202-9f96-94405a29c7d7","fields":{"slug":"/2024-11-18-패키지매니저/"},"frontmatter":{"title":"패키지 매니저 비교해보기"}}},{"node":{"id":"f8303667-d369-58a3-bcc5-6d612982cfeb","fields":{"slug":"/2024-11-24-overlay-kit-분석/"},"frontmatter":{"title":"Overlay Kit 분석"}}},{"node":{"id":"e431d5fb-3f76-5190-b63a-51e32f5d7244","fields":{"slug":"/2024-12-01-2024년-11월회고/"},"frontmatter":{"title":"2024년 11월 회고, welcome to 토스"}}}]},"previous":{"fields":{"slug":"/2022-12-09-쿠키-session-jwt/"},"frontmatter":{"title":"Cookie,Session과 JWT"}},"next":{"fields":{"slug":"/2022-12-10-http와https/"},"frontmatter":{"title":"http와 https"}}},"pageContext":{"id":"72347779-5753-5035-b978-e4569b4f14cf","series":null,"previousPostId":"01501fd0-6b11-5e0d-80ae-5f607d766625","nextPostId":"a64e2757-3cf3-5eb6-a560-d93cbc6b68b2"}},"staticQueryHashes":[],"slicesMap":{}}