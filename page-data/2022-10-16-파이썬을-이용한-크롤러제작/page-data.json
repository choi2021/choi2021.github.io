{"componentChunkName":"component---src-templates-post-jsx","path":"/2022-10-16-파이썬을-이용한-크롤러제작/","result":{"data":{"site":{"siteMetadata":{"title":"Troy DevLog"}},"markdownRemark":{"id":"8ea4e93c-32f8-510d-93e8-119bce76ffdd","excerpt":"파이썬을 이용해 웹크롤러 제작하기 웹크롤러는 데이터를 최신 상태로 유지하거나 웹페이지에 있는 원하는 정보를 추출하는 기술로, 일일이 사용자가 웹페이지를 돌아다니면서 정보를 수집하는 것을 대신해서 방문해 원하는 정보들을 수집해 줄 수 있어 자동화에 용이한 기술이다. 웹크롤러를 만드는 다양한 영상이 유튜브에 있지만 노마드코더(https://nomadcoder…","html":"<h1>파이썬을 이용해 웹크롤러 제작하기</h1>\n<p>웹크롤러는 데이터를 최신 상태로 유지하거나 웹페이지에 있는 원하는 정보를 추출하는 기술로, 일일이 사용자가 웹페이지를 돌아다니면서 정보를 수집하는 것을 대신해서 방문해 원하는 정보들을 수집해 줄 수 있어 자동화에 용이한 기술이다.</p>\n<p>웹크롤러를 만드는 다양한 영상이 유튜브에 있지만 노마드코더(<a href=\"https://nomadcoders.co/courses\">https://nomadcoders.co/courses</a>)의 파이썬 무료 강의를 참고해서 만들어보았다.</p>\n<p>파이썬을 이용해 우리가 원하는 website의 정보를 가져오려면 두 가지 라이브러리가 필요하다.</p>\n<ol>\n<li>requests: 우리가 원하는 데이터 url을 요청할 수 있는 라이브러리다.</li>\n<li>BeautifulSoup: 요청으로 받아온 response의 HTML 요소들을 가공,처리할 수 있게 도와주는 라이브러리다.</li>\n</ol>\n<h2>1. Requests로 원하는 데이터 요청하기</h2>\n<p>request을 이용하면 내가 먼저 공부했던 GET, POST, PUT, DELETE HTTP 요청을 할 수 있다.</p>\n<p>자바스크립트에서는 fetch를, 파이썬에서는 requests를 이용할 수 있구나 이해가 되었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> requests <span class=\"token keyword\">import</span> get\n\nbase_url <span class=\"token operator\">=</span><span class=\"token string\">\"https://jsonplaceholder.typicode.com/users/1\"</span>\nresponse <span class=\"token operator\">=</span> get<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>base_url<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\nstatus_code<span class=\"token operator\">=</span>response<span class=\"token punctuation\">.</span>status_code <span class=\"token comment\">#요청 코드</span>\ncontent<span class=\"token operator\">=</span>response<span class=\"token punctuation\">.</span>content <span class=\"token comment\"># 바이너리 원문</span>\ntext<span class=\"token operator\">=</span>response<span class=\"token punctuation\">.</span>text <span class=\"token comment\">#인코딩된 문자열</span>\njson<span class=\"token operator\">=</span>response<span class=\"token punctuation\">.</span>json<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#Json 데이터</span></code></pre></div>\n<p>우리가 요청한 게 올바른지에 따라 에러 핸들링이 필요하기 때문에 status_code로 확인 후에 성공했다면 데이터 추출을 위해 response.text로 응답의 문자열을 받아온다.</p>\n<h2>2. BeautifulSoup</h2>\n<p>BeautifulSoup은 앞서 requests로 받아온 데이터를 가공하는 데 사용되는 라이브러리이다.</p>\n<p>받아온 response.text를 이용해서 자체적인 파싱을 한 후에 우리가 원하는 부분들을 찾아갈 수 있다.</p>\n<p>이때 사용하는 메소드는 다음과 같다.</p>\n<ol>\n<li>find와 find_all ( tag , attr ): 원하는 태그를 찾고 attributes로 자세하게 설정이 가능하다.</li>\n<li>select( css-selector ): css-selector를 이용해서 우리가 원하는 부분을 찾을 수 있다.</li>\n</ol>\n<p>위 두가지 메소드가 유용한 이유는 우리가 원하는 부분을 찾고 난 후에 계속해서 검색할 수 있게 파싱된 text를 return해 준다.</p>\n<p>Request와 BeautifulSoup 두 가지를 합쳐서 We Work Remotely라는 사이트의 데이터를 받아오는 코드는 다음과 같이 나타낼 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> requests <span class=\"token keyword\">import</span> get\n<span class=\"token keyword\">from</span> bs4 <span class=\"token keyword\">import</span> BeautifulSoup\n\n\nbase_url <span class=\"token operator\">=</span> <span class=\"token string\">\"https://weworkremotely.com/remote-jobs/search?utf8=%E2%9C%93&amp;term=\"</span>\nresponse <span class=\"token operator\">=</span> get<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>base_url<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">if</span> response<span class=\"token punctuation\">.</span>status_code <span class=\"token operator\">!=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">:</span>\n   <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Can't request website\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n   results <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n   soup <span class=\"token operator\">=</span> BeautifulSoup<span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">,</span> <span class=\"token string\">\"html.parser\"</span><span class=\"token punctuation\">)</span>\n   jobs <span class=\"token operator\">=</span> soup<span class=\"token punctuation\">.</span>find_all<span class=\"token punctuation\">(</span><span class=\"token string\">\"section\"</span><span class=\"token punctuation\">,</span> class_<span class=\"token operator\">=</span><span class=\"token string\">\"jobs\"</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># list로 받아</span>\n   <span class=\"token keyword\">for</span> job_section <span class=\"token keyword\">in</span> jobs<span class=\"token punctuation\">:</span>\n     job_posts <span class=\"token operator\">=</span> job_section<span class=\"token punctuation\">.</span>find_all<span class=\"token punctuation\">(</span><span class=\"token string\">\"li\"</span><span class=\"token punctuation\">)</span>\n     job_posts<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># view_all 제거</span>\n       <span class=\"token keyword\">for</span> post <span class=\"token keyword\">in</span> job_posts<span class=\"token punctuation\">:</span>\n         anchors <span class=\"token operator\">=</span> post<span class=\"token punctuation\">.</span>find_all<span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span>\n         anchor <span class=\"token operator\">=</span> anchors<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\"># 로고 anchor 제거</span>\n         link <span class=\"token operator\">=</span> anchor<span class=\"token punctuation\">[</span><span class=\"token string\">\"href\"</span><span class=\"token punctuation\">]</span>\n         company<span class=\"token punctuation\">,</span> kind<span class=\"token punctuation\">,</span> region <span class=\"token operator\">=</span> anchor<span class=\"token punctuation\">.</span>find_all<span class=\"token punctuation\">(</span><span class=\"token string\">\"span\"</span><span class=\"token punctuation\">,</span>class_<span class=\"token operator\">=</span><span class=\"token string\">\"company\"</span><span class=\"token punctuation\">)</span>\n         title <span class=\"token operator\">=</span> anchor<span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span><span class=\"token string\">\"span\"</span><span class=\"token punctuation\">,</span> class_<span class=\"token operator\">=</span><span class=\"token string\">\"title\"</span><span class=\"token punctuation\">)</span>\n         job_data <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token string\">\"link\"</span><span class=\"token punctuation\">:</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"https://weworkremotely.com</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>link<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">,</span>\n                    <span class=\"token string\">\"company\"</span><span class=\"token punctuation\">:</span> company<span class=\"token punctuation\">.</span>string<span class=\"token punctuation\">,</span>\n                    <span class=\"token string\">\"location\"</span><span class=\"token punctuation\">:</span> region<span class=\"token punctuation\">.</span>string<span class=\"token punctuation\">,</span>\n                    <span class=\"token string\">\"position\"</span><span class=\"token punctuation\">:</span> title<span class=\"token punctuation\">.</span>string\n                <span class=\"token punctuation\">}</span>\n    results<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>job_data<span class=\"token punctuation\">)</span></code></pre></div>\n<h2>3. 셀레니움</h2>\n<p>웹크롤링은 우리가 원하는 웹사이트의 정보를 받아오고 가공하는 기술이다. 하지만 회사에서는 우리가 원하는 정보가 중요하기 때문에, 또는 회사 서버에 과부하를 줄 수 있기 때문에 막아놓을 수 있다. 그래서 크롤링을 상업적인 목적이나, 해당 회사에게 불이익을 주면 법적 문제를 가질 수도 있기 때문에 조심해야 한다. 이를 위해서 사용하는 방법이 접속한 게 '봇인지 사람인지'를 확인하는 방식이다.</p>\n<p>셀레니움은 이때 우리가 봇으로 접속한 게 아닌 것처럼 실제로 브라우저에 접속할 수 있게 도와줄 수 있는 프로그램이다. 또한, 자바스크립트가 동적으로 만든 데이터들을 크롤링이 가능하고, 사이트의 클릭과 같은 이벤트를 줄 수 있는 장점도 가지고 있다.</p>\n<p>셀레니움을 사용하려면 추가적인 설정이 필요하다. 웹드라이버라는 기능으로 우리가 원하는 브라우저에 맞게 설정과 옵션에 따라 설정하면 된다. 나는 replit이란 웹 IDE에서 코딩하고 있었기 때문에 다음과 같은 옵션을 추가해서 진행했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> selenium <span class=\"token keyword\">import</span> webdriver\n<span class=\"token keyword\">from</span> selenium<span class=\"token punctuation\">.</span>webdriver<span class=\"token punctuation\">.</span>chrome<span class=\"token punctuation\">.</span>options <span class=\"token keyword\">import</span> Options\n\noptions <span class=\"token operator\">=</span> Options<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\noptions<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">\"--no-sandbox\"</span><span class=\"token punctuation\">)</span>\noptions<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">\"--disable-dev-shm-usage\"</span><span class=\"token punctuation\">)</span>\nbrowser <span class=\"token operator\">=</span> webdriver<span class=\"token punctuation\">.</span>Chrome<span class=\"token punctuation\">(</span>options<span class=\"token operator\">=</span>options<span class=\"token punctuation\">)</span></code></pre></div>\n<p>이렇게 만든 browser를 이용해 requests를 대신해서 사용하면 다음과 같이 코드를 바꿀 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> bs4 <span class=\"token keyword\">import</span> BeautifulSoup\n<span class=\"token keyword\">from</span> selenium <span class=\"token keyword\">import</span> webdriver\n<span class=\"token keyword\">from</span> selenium<span class=\"token punctuation\">.</span>webdriver<span class=\"token punctuation\">.</span>chrome<span class=\"token punctuation\">.</span>options <span class=\"token keyword\">import</span> Options\n\noptions <span class=\"token operator\">=</span> Options<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\noptions<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">\"--no-sandbox\"</span><span class=\"token punctuation\">)</span>\noptions<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">\"--disable-dev-shm-usage\"</span><span class=\"token punctuation\">)</span>\nbrowser <span class=\"token operator\">=</span> webdriver<span class=\"token punctuation\">.</span>Chrome<span class=\"token punctuation\">(</span>options<span class=\"token operator\">=</span>options<span class=\"token punctuation\">)</span>\n\n\n\nresults <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">for</span> page <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>pages<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n   base_url <span class=\"token operator\">=</span> <span class=\"token string\">\"https://kr.indeed.com/jobs\"</span>\n   browser<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>base_url<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n   soup <span class=\"token operator\">=</span> BeautifulSoup<span class=\"token punctuation\">(</span>browser<span class=\"token punctuation\">.</span>page_source<span class=\"token punctuation\">,</span> <span class=\"token string\">\"html.parser\"</span><span class=\"token punctuation\">)</span>\n   job_list <span class=\"token operator\">=</span> soup<span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span><span class=\"token string\">\"ul\"</span><span class=\"token punctuation\">,</span> class_<span class=\"token operator\">=</span><span class=\"token string\">\"jobsearch-ResultsList\"</span><span class=\"token punctuation\">)</span>\n   jobs <span class=\"token operator\">=</span> job_list<span class=\"token punctuation\">.</span>find_all<span class=\"token punctuation\">(</span><span class=\"token string\">\"li\"</span><span class=\"token punctuation\">,</span> recursive<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\n\n   <span class=\"token keyword\">for</span> job <span class=\"token keyword\">in</span> jobs<span class=\"token punctuation\">:</span>\n       zone <span class=\"token operator\">=</span> job<span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span><span class=\"token string\">\"div\"</span><span class=\"token punctuation\">,</span> class_<span class=\"token operator\">=</span><span class=\"token string\">\"mosaic-zone\"</span><span class=\"token punctuation\">)</span>\n       <span class=\"token keyword\">if</span> zone <span class=\"token operator\">==</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n           anchor <span class=\"token operator\">=</span> job<span class=\"token punctuation\">.</span>select_one<span class=\"token punctuation\">(</span><span class=\"token string\">\"h2 a\"</span><span class=\"token punctuation\">)</span>\n           title <span class=\"token operator\">=</span> anchor<span class=\"token punctuation\">[</span><span class=\"token string\">\"aria-label\"</span><span class=\"token punctuation\">]</span>\n           link <span class=\"token operator\">=</span> anchor<span class=\"token punctuation\">[</span><span class=\"token string\">\"href\"</span><span class=\"token punctuation\">]</span>\n           company <span class=\"token operator\">=</span> job<span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span><span class=\"token string\">\"span\"</span><span class=\"token punctuation\">,</span> class_<span class=\"token operator\">=</span><span class=\"token string\">\"companyName\"</span><span class=\"token punctuation\">)</span>\n           location <span class=\"token operator\">=</span> job<span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span><span class=\"token string\">\"div\"</span><span class=\"token punctuation\">,</span> class_<span class=\"token operator\">=</span><span class=\"token string\">\"companyLocation\"</span><span class=\"token punctuation\">)</span>\n           job_data <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token string\">\"link\"</span><span class=\"token punctuation\">:</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"https://kr.indeed.com</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>link<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"company\"</span><span class=\"token punctuation\">:</span> company<span class=\"token punctuation\">.</span>string<span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"location\"</span><span class=\"token punctuation\">:</span> location<span class=\"token punctuation\">.</span>string<span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"position\"</span><span class=\"token punctuation\">:</span> title\n              <span class=\"token punctuation\">}</span>\n            results<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>job_data<span class=\"token punctuation\">)</span></code></pre></div>\n<p>이렇게 가공한 데이터를 나만 사용할 거 라면, 그냥 로컬로 엑셀로 저장되게 하면 되겠지만, 사용자들이 프론트페이지에서 요청을 보내면, 해당 요청에 맞게 받아오는 서비스를 만들고 싶기 때문에, <strong>백엔드 서버가 필요하게 된다.</strong> 이를 위해서 간단한 flask라는 파이썬 프레임워크를 내일 공부하고 적용해 보고자 한다.</p>","frontmatter":{"title":"모으잡-파이썬을 이용한 웹크롤러 제작","date":"October 16, 2022","tags":["사이드프로젝트","모으잡"],"series":"모으잡"},"fields":{"slug":"/2022-10-16-파이썬을-이용한-크롤러제작/","readingTime":{"minutes":6.81}}},"seriesList":{"edges":[{"node":{"id":"119332ec-e524-5a0a-8773-e8ef24adbf82","fields":{"slug":"/2022-09-22-채용공고-정리사이트-기획/"},"frontmatter":{"title":"채용공고 정리 서비스 기획"}}},{"node":{"id":"8ca4b7be-9b74-5889-a1b7-4e4e01fa7a9b","fields":{"slug":"/2022-10-15-모으잡-기획-구체화/"},"frontmatter":{"title":"모으잡-기획 구체화"}}},{"node":{"id":"8ea4e93c-32f8-510d-93e8-119bce76ffdd","fields":{"slug":"/2022-10-16-파이썬을-이용한-크롤러제작/"},"frontmatter":{"title":"모으잡-파이썬을 이용한 웹크롤러 제작"}}},{"node":{"id":"cfdd02da-1612-5a94-b864-05cc7da35ec9","fields":{"slug":"/2022-10-17-flask-서버만들기/"},"frontmatter":{"title":"모으잡-flask이용해 SSR서버만들기"}}},{"node":{"id":"144088bc-f664-55f4-a82a-014413a07549","fields":{"slug":"/2022-10-20-모으잡-cors-에러핸들링/"},"frontmatter":{"title":"모으잡-express cors 에러, 에러핸들링"}}},{"node":{"id":"bf96854b-679b-5f60-a254-c1d71d4c6b77","fields":{"slug":"/2022-10-22-모으잡-express-서버-제작-시작-cheerio/"},"frontmatter":{"title":"모으잡-express 서버 제작 시작과 cheerio"}}},{"node":{"id":"94a1d33a-6956-5a2f-9ee9-188b03f080a6","fields":{"slug":"/2022-10-23-모으잡-puppeteer-크롤러제작-프론트페이지-구상/"},"frontmatter":{"title":"모으잡-puppeteer을 이용한 크롤러제작, 프론트페이지 구상"}}},{"node":{"id":"e0ed8043-551e-5bd1-99bc-2300ea066763","fields":{"slug":"/2022-10-24-모으잡-프론트페이지-UI제작/"},"frontmatter":{"title":"모으잡-프론트페이지 UI제작"}}},{"node":{"id":"b8ed216b-41ca-5e03-8bf6-6d33b40fb63e","fields":{"slug":"/2022-10-25-모으잡-UI-수정-크롤링-데이터-연결/"},"frontmatter":{"title":"모으잡-프론트페이지 UI수정, 크롤링한 데이터 받아오기"}}},{"node":{"id":"00d9fb6e-4fd8-5549-94ef-61f365359149","fields":{"slug":"/2022-11-23-모으잡-Next-migration/"},"frontmatter":{"title":"모으잡-Next js로 migration, 디자인 수정"}}},{"node":{"id":"898c5886-c432-574a-a308-3528f3a39982","fields":{"slug":"/2022-11-25-모으잡-회원가입로그인-로직/"},"frontmatter":{"title":"모으잡-firebase를 이용한 회원가입 로직 구현"}}},{"node":{"id":"c4321aba-89b2-5f15-bcbb-570673b7e7f2","fields":{"slug":"/2022-11-29-모으잡 DB연결과-크롤링-기능-연결/"},"frontmatter":{"title":"모으잡-DB연결과 크롤링 기능 연결"}}},{"node":{"id":"4f7bed59-f9dc-5f76-bfdf-760ad169011d","fields":{"slug":"/2022-11-30-모으잡-배포/"},"frontmatter":{"title":"모으잡-vercel부터 aws까지 배포과정"}}},{"node":{"id":"b54b712d-8390-592a-bbc1-97d511193b5b","fields":{"slug":"/2022-12-17-모으잡-인증인가/"},"frontmatter":{"title":"모으잡-SSR을 이용한 인증,인가 도입"}}},{"node":{"id":"aed894f3-fcd8-5b75-98e9-1964f42739ef","fields":{"slug":"/2022-12-23-모으잡-기획-디자인 수정/"},"frontmatter":{"title":"모으잡-기획, 디자인 수정"}}},{"node":{"id":"4d86f4ac-998a-59a5-a4e2-a474b8dbc7f7","fields":{"slug":"/2022-12-25-모으잡-서버사이드-랜더링을-이용한-성능개선/"},"frontmatter":{"title":"모으잡-서버사이드 랜더링을 이용한 성능 개선"}}}]},"previous":{"fields":{"slug":"/2022-10-15-모으잡-기획-구체화/"},"frontmatter":{"title":"모으잡-기획 구체화"}},"next":{"fields":{"slug":"/2022-10-17-flask-서버만들기/"},"frontmatter":{"title":"모으잡-flask이용해 SSR서버만들기"}}},"pageContext":{"id":"8ea4e93c-32f8-510d-93e8-119bce76ffdd","series":"모으잡","previousPostId":"8ca4b7be-9b74-5889-a1b7-4e4e01fa7a9b","nextPostId":"cfdd02da-1612-5a94-b864-05cc7da35ec9"}},"staticQueryHashes":[],"slicesMap":{}}