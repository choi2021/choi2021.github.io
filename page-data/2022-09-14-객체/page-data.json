{"componentChunkName":"component---src-templates-post-jsx","path":"/2022-09-14-객체/","result":{"data":{"site":{"siteMetadata":{"title":"Troy DevLog"}},"markdownRemark":{"id":"fa488a20-ff1a-5d21-a871-7cd7a1943bb7","excerpt":"어제 정리한 함수에 이어 이번엔 오브젝트를 정리해보고자 한다. 오브젝트는 이어질 클래스와도 많이 연결되어 있으므로 생성자함수 전까지만 정리해보고자 한다. 우선 정리하면서 자주 언급했던 오브젝트는 서로 연관있는 속성(property)과 행동(method)들을 묶어놓은 변수라고 할수있다. 다음과 같이 \"나\"라는 객체에 나에 대한 정보( property)와 내…","html":"<p>어제 정리한 함수에 이어 이번엔 오브젝트를 정리해보고자 한다. 오브젝트는 이어질 클래스와도 많이 연결되어 있으므로 생성자함수 전까지만 정리해보고자 한다.</p>\n<p>우선 정리하면서 자주 언급했던 오브젝트는 <b>서로 연관있는 속성(property)과 행동(method)들을 묶어놓은 변수</b>라고 할수있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> Youngjun<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">gender</span><span class=\"token operator\">:</span><span class=\"token string\">\"male\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span><span class=\"token number\">26</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">smile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"웃음\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>다음과 같이 \"나\"라는 객체에 나에 대한 정보( property)와 내가 할 행동(method)을 정리했다. 이러한 오브젝트에 대해 알아보자.</p>\n<h2>1) Object 만들기</h2>\n<p>Object를 만들 수 있는 방법에는 크게 3가지가 있다.</p>\n<ol>\n<li><code class=\"language-text\">{ key: value}</code></li>\n<li>new Object 사용하기</li>\n<li>object.create() 메소드 사용하기</li>\n</ol>\n<p>오브젝트는 \"key\"와 \"value\"로 이루어져 있는 자료형으로 3가지 방법으로 key와 value가 같은 오브젝트를 다음과 같이 만들 수있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> obj1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">key</span><span class=\"token operator\">:</span> <span class=\"token string\">'any value'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> obj2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nobj2<span class=\"token punctuation\">.</span>key <span class=\"token operator\">=</span> <span class=\"token string\">'any value'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> obj3 <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">key</span><span class=\"token operator\">:</span> <span class=\"token string\">'any value'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>첫번째는 전달해준 key와 value를 가지고 있는 오브젝트를 바로 만드는 방법으로 가장 많이 사용하는 방법이라 생각된다. 두번째는 새로운 빈 객체를 만든 뒤에 key와 value를 전달해준다. 세번째 방법은 Object의 메소드를 이용하는 방법으로, 첫번째 인자로 우리가 만들 객체의 프로토타입을, 두번째 인자로 우리가 원하는 key와 value를 가진 오브젝트를 전달해 만들었다. 확실히 첫번째 방법이 간단하고 이해가 잘되는 방법인 것같다.</p>\n<h2>2) Object의 key와 value</h2>\n<p>오브젝트의 key와 value는 서로 사용될 수 있는 자료형이 다르다. key가 될 수 있는 자료형은 <b>문자,숫자,문자열,심볼</b>이고, value가 될 수 있는 자료형은 <b>primitive 자료형과 객체</b>, 모든 자료형이 다 가능하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> Youngjun<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>\n    <span class=\"token string-property property\">\"gender\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"male\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"habits\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"music\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"game\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"coding\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">0</span><span class=\"token operator\">:</span><span class=\"token number\">300</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">[</span><span class=\"token string\">\"biggest-goal-of-life\"</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token string\">\"성공하기\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위의 예제 오브젝트에서 key에서 문자열과 숫자로 담았고 문자열중에서도 \"-\"로 연결되어있는 경우에는 \"[]\"로 감싸서 전달해주어야 한다. 그냥 \"biggest-goal-of-life\"로 전달할 시에는 에러가 발생한다. 그렇기에 긴 단어의 경우에 camel case를 이용하는 게 더 나은 것 같다. value로는 habits key에 배열을 전달했는데 배열 또한 javascript에서 객체이기 때문에 사용가능하다.</p>\n<p>key와 value는 자물쇠처럼 맞는 열쇠를 객체에 전달하면 해당하는 값을 얻을 수 있다. 이러한 key를 전달하는 방식에는 다음과 같은 2가지 방법이 있다.</p>\n<ol>\n<li>dot notation ( . )</li>\n<li>bracket notation ([ ])</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> Youngjun<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">gender</span><span class=\"token operator\">:</span><span class=\"token string\">\"male\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span><span class=\"token number\">26</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">smile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"웃음\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> age<span class=\"token operator\">=</span><span class=\"token string\">\"age\"</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Youngjun<span class=\"token punctuation\">.</span>gender<span class=\"token punctuation\">)</span> <span class=\"token comment\">//\"male\"</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Youngjun<span class=\"token punctuation\">[</span>age<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//26</span></code></pre></div>\n<p>위와 같이 첫번째 방시인 dot notation을 이용하면 문자열 key로 되어있는 값에 접근할 수있고, bracket notation의 경우에는 변수로 값을 받을 수도 있어 좀 더 동적으로 사용할 수 있다.</p>\n<h2>3. Object 추가 삭제</h2>\n<p>Object의 key와 value를 추가하는 방법은 간단하게 앞서 언급한 2가지 접근 방법을 사용해 값을 지정해줄 수 있고, 제거할 때는 해당하는 key 값을 삭제하면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> Youngjun<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">gender</span><span class=\"token operator\">:</span><span class=\"token string\">\"male\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span><span class=\"token number\">26</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">smile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"웃음\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nYoungjun<span class=\"token punctuation\">.</span>height<span class=\"token operator\">=</span><span class=\"token number\">172</span>\nYoungjun<span class=\"token punctuation\">[</span><span class=\"token string\">\"homeAddress\"</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">\"Gwangju\"</span>\n<span class=\"token keyword\">delete</span> Youngjun<span class=\"token punctuation\">.</span>age</code></pre></div>\n<p>다음과 같이 사용해서 Youngjun 오브젝트에 키와 주소 값을 추가하고 나이 정보를 삭제할 수 있다.</p>\n<p>Object의 추가 삭제 방법과 bracket notation을 이용해 오브젝트에 값을 동적으로 추가하고 삭제하면 다음과 같이 사용할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">addProperty</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj<span class=\"token punctuation\">,</span>key<span class=\"token punctuation\">,</span>value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    obj<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>value <span class=\"token comment\">//obj.key=value 사용하면 안돼</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> Youngjun<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">gender</span><span class=\"token operator\">:</span><span class=\"token string\">\"male\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span><span class=\"token number\">26</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">smile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"웃음\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">addProperty</span><span class=\"token punctuation\">(</span>Youngjun<span class=\"token punctuation\">,</span><span class=\"token string\">\"height\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">172</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>addProperty함수에 오브젝트와 key와 value를 전달해 속성을 추가 해주었다. 이때 앞서 설명한 두가지 접근 방법 중 dot notation을 사용하면 항상 \"key\"라는 key에만 접근해 value를 바꾸기 때문에 사용해선 안된다. bracket notation을 이용하면 전달받은 인자를 이용해 추가할 수 있다.</p>\n<h2>4) Object의 Method와 간단한 팁</h2>\n<p>가장 처음 만든 오브젝트를 보면 smile이라는 함수를 가지고 있다. 이러한 오브젝트 내부의 함수를 <b>Method</b>라고 하고 property에 접근할 때와 동일하게 접근해 함수를 호출 할 수 있다. 그리고 오브젝트의 key와 value가 key만 전달해도 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> gender <span class=\"token operator\">=</span> <span class=\"token string\">'male'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> age <span class=\"token operator\">=</span> <span class=\"token number\">26</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> Youngjun <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  gender<span class=\"token punctuation\">,</span> <span class=\"token comment\">//gender:gender와 같아</span>\n  age<span class=\"token punctuation\">,</span>\n  <span class=\"token function\">smile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'웃음'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nYoungjun<span class=\"token punctuation\">.</span><span class=\"token function\">smile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//\"웃음\"</span></code></pre></div>\n<p>예에서 gender와 age의 key와 value가 같으므로 축약해서 한번에 나타냈다. 이러한 특징을 이용해 좀 더 편하게 오브젝트에 값을 설정할 수 있다.</p>","frontmatter":{"title":"객체","date":"September 14, 2022","tags":["javascript","문법"],"series":null},"fields":{"slug":"/2022-09-14-객체/","readingTime":{"minutes":6.39}}},"seriesList":{"edges":[{"node":{"id":"db12bfaf-9b68-5456-b2d3-bf7af6db01f6","fields":{"slug":"/2022-09-06-BEM과-자료형/"},"frontmatter":{"title":"BEM과 자바스크립트의 자료형"}}},{"node":{"id":"1b75d916-f93f-54a4-bcb0-ee6a88e1e807","fields":{"slug":"/2022-09-07-자바스트립트의-두가지-복사방법/"},"frontmatter":{"title":"자바스크립트의 두가지 복사 방법"}}},{"node":{"id":"11c1a396-7281-552a-9589-6f14d399473b","fields":{"slug":"/2022-09-07-자바스크립트의-타입과연산자/"},"frontmatter":{"title":"자바스크립트의 타입과 연산자"}}},{"node":{"id":"3b564afa-9e11-5817-9130-4e2a191f4dff","fields":{"slug":"/2022-09-10-intersection-observer /"},"frontmatter":{"title":"Intersection observer"}}},{"node":{"id":"ac0c72d8-87ec-5038-8d94-316c5fcc3d62","fields":{"slug":"/2022-09-12-브라우저API/"},"frontmatter":{"title":"Browser API"}}},{"node":{"id":"362a634b-e650-5526-851e-d5fbd908dab8","fields":{"slug":"/2022-09-13-함수/"},"frontmatter":{"title":"함수"}}},{"node":{"id":"fa488a20-ff1a-5d21-a871-7cd7a1943bb7","fields":{"slug":"/2022-09-14-객체/"},"frontmatter":{"title":"객체"}}},{"node":{"id":"93e28849-ee68-5f54-a013-82287b705626","fields":{"slug":"/2022-09-17-빌트인객체/"},"frontmatter":{"title":"빌트인 객체"}}},{"node":{"id":"792817ac-87f4-5be2-a7aa-360f10d5c8b4","fields":{"slug":"/2022-09-19-array/"},"frontmatter":{"title":"Array"}}},{"node":{"id":"b9665749-4456-51bc-8980-7b1df634660e","fields":{"slug":"/2022-09-22-iteration/"},"frontmatter":{"title":"Iteration"}}},{"node":{"id":"b36e6692-59b2-579e-a86a-a032da431840","fields":{"slug":"/2022-09-24-Map과Set/"},"frontmatter":{"title":"Map과 Set"}}},{"node":{"id":"483fabc0-6bc7-5db7-9654-84987635add6","fields":{"slug":"/2022-10-06-HTTP란/"},"frontmatter":{"title":"HTTP 정리"}}},{"node":{"id":"197d4909-e862-5b9a-8676-b53e027e5379","fields":{"slug":"/2022-10-18-Node-JS-기초/"},"frontmatter":{"title":"Node js:NodeJS 이용한 서버 만들기"}}},{"node":{"id":"bd10a339-6c06-5837-862e-192c45081282","fields":{"slug":"/2022-10-19-Express-기초/"},"frontmatter":{"title":"NodeJS: express"}}},{"node":{"id":"8195c683-dc7e-58d3-b7b6-c5a1e78b6522","fields":{"slug":"/2022-11-18-CSR과-SSR/"},"frontmatter":{"title":"CSR과 SSR 그리고 Universal Rendering"}}},{"node":{"id":"f05c2eb8-16da-5e6e-a906-bbdffa05ace6","fields":{"slug":"/2022-11-20-스코프-실행컨테스트-클로저/"},"frontmatter":{"title":"스코프,실행컨텍스트,클로저"}}},{"node":{"id":"24ec8ed8-dfae-5619-8c64-df914805c0eb","fields":{"slug":"/2022-11-24-Critical-Rendering-Path/"},"frontmatter":{"title":"💻 Critical Rendering Path"}}},{"node":{"id":"c32a9017-54df-5eb4-98cd-5eba4b9ae41c","fields":{"slug":"/2022-11-27-비동기와-프로미스/"},"frontmatter":{"title":"비동기와 프로미스"}}},{"node":{"id":"364cb56c-45fc-52dc-8311-0f61a88dfdfe","fields":{"slug":"/2022-11-30-지스트-청원-서비스-회고/"},"frontmatter":{"title":"지스트 청원서비스 회고"}}},{"node":{"id":"40c2d20c-04f0-5876-aee6-be5b43bce78a","fields":{"slug":"/2022-12-02-제너레이터와-async-await/"},"frontmatter":{"title":"제너레이터와 Async-Await"}}},{"node":{"id":"4ed9db58-39c3-5f21-ad1e-59be0b94e988","fields":{"slug":"/2022-12-03-모으잡-리팩토링/"},"frontmatter":{"title":"모으잡-check box 수정, react-query 커스텀 훅, 크롤링 이슈"}}},{"node":{"id":"937a4bc1-5318-52a9-b6fd-61188127ce23","fields":{"slug":"/2022-12-05-호이스팅/"},"frontmatter":{"title":"호이스팅"}}},{"node":{"id":"09bdd07c-e41f-573e-bd66-71c526ab83f8","fields":{"slug":"/2022-12-09-쿠키-session-jwt/"},"frontmatter":{"title":"Cookie,Session과 JWT"}}},{"node":{"id":"b552cf79-29a8-5e87-a162-c03661121fb6","fields":{"slug":"/2022-12-09-this/"},"frontmatter":{"title":"this"}}},{"node":{"id":"05a00e19-f52a-5596-a97e-4f7390b20119","fields":{"slug":"/2022-12-10-http와https/"},"frontmatter":{"title":"http와 https"}}},{"node":{"id":"b91bff56-be62-5318-b6f1-dc3ddc789d08","fields":{"slug":"/2022-12-12-생성자함수-프로토타입/"},"frontmatter":{"title":"생성자 함수, 프로토타입"}}},{"node":{"id":"3b7d6329-680d-5db9-8ee6-cb15da44b6a8","fields":{"slug":"/2022-12-30-이벤트/"},"frontmatter":{"title":"이벤트"}}},{"node":{"id":"a94c02b8-45b0-5fac-b129-cf99c64a8f24","fields":{"slug":"/2022-12-23-class/"},"frontmatter":{"title":"클래스"}}},{"node":{"id":"d1dc9a50-2824-5859-826f-ceb445994e93","fields":{"slug":"/2023-01-23-리액트의-기본원리/"},"frontmatter":{"title":"React study: 리액트의 기본 원리"}}},{"node":{"id":"8dd5dd72-0262-582e-8a1d-33fd6b2245f3","fields":{"slug":"/2023-01-23-Vite와-번들러/"},"frontmatter":{"title":"Vite는 왜 빠를까, 번들러에 대한 정리"}}},{"node":{"id":"2cd6faf4-d340-58ee-a4bc-c4b16bc21c42","fields":{"slug":"/2022-12-20-리액트-성능보장/"},"frontmatter":{"title":"React study: 리액트가 성능을 보장하는 방법"}}},{"node":{"id":"717eb8fb-45a2-5fef-aaa9-c5c5eceb792a","fields":{"slug":"/2023-02-03-useState,useEffect, useRef, memo/"},"frontmatter":{"title":"React Study: useState, useEffect, useRef, memo"}}},{"node":{"id":"26ed4c76-848a-56e4-ae68-7e879e23bf77","fields":{"slug":"/2023-02-17-취업준비-회고/"},"frontmatter":{"title":"신입으로 시작하며 작성하는 취준 회고"}}},{"node":{"id":"166ce257-9146-51aa-a470-57c257844c07","fields":{"slug":"/2023-02-21-google.com-입력했을때-일어나는-일/"},"frontmatter":{"title":"google.com를 브라우저에 검색했을 때 일어나는 일"}}},{"node":{"id":"aaa88fe5-37a4-5ff4-9de2-959da89dcd86","fields":{"slug":"/2023-03-01-CDN/"},"frontmatter":{"title":"CDN은 뭘까?"}}},{"node":{"id":"f2fa5329-7ce4-5a65-9e28-0e4b1d188a6c","fields":{"slug":"/2023-03-05-디자인패턴/"},"frontmatter":{"title":"MVC, MVVM, Flux패턴 그리고 Service와 Repository 패턴"}}},{"node":{"id":"543681af-5db3-518d-b19e-7668efdda7fc","fields":{"slug":"/2023-03-31-2023년-3월회고/"},"frontmatter":{"title":"🐤 2023년 3월 회고"}}},{"node":{"id":"eecd0175-5be8-556d-a36a-756d4af0700b","fields":{"slug":"/2023-05-06-2023년-4월회고/"},"frontmatter":{"title":"😎 2023년 4월 회고"}}},{"node":{"id":"055d38ec-e2c0-5a63-aa95-fbc147365d29","fields":{"slug":"/2023-06-05-2023년-5월회고/"},"frontmatter":{"title":"☀︎ 2023년 5월 회고"}}},{"node":{"id":"32156a84-756c-50c3-bd9f-77b3dc2e7547","fields":{"slug":"/2023-07-06-2023년-6월회고/"},"frontmatter":{"title":"☼ 2023년 6월 회고"}}},{"node":{"id":"5438a45e-764a-5e14-b5ba-b71f4ba8be23","fields":{"slug":"/2023-08-09-2023년-7월회고/"},"frontmatter":{"title":"☂︎ 2023년 7월 회고"}}},{"node":{"id":"7a788f0b-75af-5eac-b509-fd0d3f119d98","fields":{"slug":"/2023-09-09-2023년-8월회고/"},"frontmatter":{"title":"😊 2023년 8월 회고"}}},{"node":{"id":"d47fe7ea-21c5-5c88-b64e-e34021957c29","fields":{"slug":"/2023-10-03-2023년-9월회고/"},"frontmatter":{"title":"🚅 2023년 9월 회고"}}},{"node":{"id":"4268b04a-703c-5bd0-8081-e900ee0ce15c","fields":{"slug":"/2023-11-01-2023년-10월회고/"},"frontmatter":{"title":"🧐 2023년 10월 회고"}}},{"node":{"id":"01c028b9-d56c-52a8-8719-eb5cbcf6ea70","fields":{"slug":"/2023-12-02-2023년-11월회고/"},"frontmatter":{"title":"😃 2023년 11월 회고"}}},{"node":{"id":"e696cf5b-451a-5fe0-a2cb-100a22d3d356","fields":{"slug":"/2023-12-31-2023년-12월회고/"},"frontmatter":{"title":"🌟 2023년 12월 회고"}}},{"node":{"id":"b0eb4259-0e5c-53fd-9fdc-cd5e53336653","fields":{"slug":"/2024-02-07-2024년-1월회고/"},"frontmatter":{"title":"🐥 2024년 1월회고"}}},{"node":{"id":"e7e95438-a61a-5b79-b114-ba3d8026517d","fields":{"slug":"/2024-03-02-2024년-2월회고/"},"frontmatter":{"title":"🙊 2024년 2월회고"}}},{"node":{"id":"1bc07ca5-bb4e-5644-a20e-a011d944706b","fields":{"slug":"/2024-03-03-자바스크립트의-동시성-이해하기/"},"frontmatter":{"title":"Promise.all의 동시성 이해하기"}}},{"node":{"id":"bb2429ab-4ef6-53ad-950b-f49dae0134da","fields":{"slug":"/2024-03-30-App-StartUp-time-개선/"},"frontmatter":{"title":"App StartUp time 개선"}}},{"node":{"id":"a20bddb0-3f08-5708-81e9-73695d6250c7","fields":{"slug":"/2024-04-07-2024년-3월회고/"},"frontmatter":{"title":"🙌 2024년 3월회고"}}},{"node":{"id":"1e59eab7-ece6-5711-97f8-273322a2644b","fields":{"slug":"/2024-04-21-onViewableItemsChanged-이해해보기/"},"frontmatter":{"title":"👀 onViewableItemsChanged 이해해보기"}}},{"node":{"id":"a96d70dd-918a-592f-b9a9-4300903c6dd2","fields":{"slug":"/2024-05-01-2024년-4월회고/"},"frontmatter":{"title":"🙌 2024년 4월회고"}}},{"node":{"id":"4b7beeac-e53e-56b2-b35c-a77e998edb64","fields":{"slug":"/2024-06-01-2024년-5월회고/"},"frontmatter":{"title":"🙌 2024년 5월회고"}}},{"node":{"id":"2fd67da4-b9da-54bb-8fac-9974572e6e56","fields":{"slug":"/2024-06-02-에러바운더리-도입하기/"},"frontmatter":{"title":"✅ 에러바운더리 도입하기"}}}]},"previous":{"fields":{"slug":"/2022-09-13-함수/"},"frontmatter":{"title":"함수"}},"next":{"fields":{"slug":"/2022-09-17-빌트인객체/"},"frontmatter":{"title":"빌트인 객체"}}},"pageContext":{"id":"fa488a20-ff1a-5d21-a871-7cd7a1943bb7","series":null,"previousPostId":"362a634b-e650-5526-851e-d5fbd908dab8","nextPostId":"93e28849-ee68-5f54-a013-82287b705626"}},"staticQueryHashes":[],"slicesMap":{}}