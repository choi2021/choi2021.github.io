{"componentChunkName":"component---src-templates-post-jsx","path":"/2023-12-19-conditional-types/","result":{"data":{"site":{"siteMetadata":{"title":"Troy DevLog"}},"markdownRemark":{"id":"7a9a6af1-4b1e-5433-bb68-e8ae4c84e2c0","excerpt":"Conditional Types 🤩 타입스크립트에서 조건부 타입은 와 같은 형태로 사용된다. 이는 가 에 할당 가능한지에 따라서 와 중 하나의 타입을 선택하게 된다. 이러한 모습은 기존 javascript의 삼항연산자와 유사하게 느껴진다.  Generic과 함께 사용하기 Generic과 함께 사용하면 더 유용하게 사용할 수 있다. 다음 예제를 보자. In…","html":"<h2>Conditional Types 🤩</h2>\n<p>타입스크립트에서 조건부 타입은 <code class=\"language-text\">T extends U ? X : Y</code>와 같은 형태로 사용된다. 이는 <code class=\"language-text\">T</code>가 <code class=\"language-text\">U</code>에 할당 가능한지에 따라서 <code class=\"language-text\">X</code>와 <code class=\"language-text\">Y</code>중 하나의 타입을 선택하게 된다.</p>\n<p>이러한 모습은 기존 javascript의 삼항연산자와 유사하게 느껴진다. <code class=\"language-text\">(condition ? trueExpression : falseExpression)</code></p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">live</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Dog</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">woof</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Example1</span> <span class=\"token operator\">=</span> Dog <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Animal</span> <span class=\"token operator\">?</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token comment\">// type Example1 = number</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Example2</span> <span class=\"token operator\">=</span> RegExp <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Animal</span> <span class=\"token operator\">?</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token comment\">// type Example2 = string</span></code></pre></div>\n<h3>Generic과 함께 사용하기</h3>\n<p>Generic과 함께 사용하면 더 유용하게 사용할 수 있다. 다음 예제를 보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// 예시 1</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">MessageOf<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">{</span> message<span class=\"token operator\">:</span> <span class=\"token builtin\">unknown</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">?</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"message\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> <span class=\"token builtin\">never</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Email</span> <span class=\"token punctuation\">{</span>\n  message<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Dog</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">bark</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">EmailMessageContents</span> <span class=\"token operator\">=</span> MessageOf<span class=\"token operator\">&lt;</span>Email<span class=\"token operator\">></span> <span class=\"token comment\">// string</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">DogMessageContents</span> <span class=\"token operator\">=</span> MessageOf<span class=\"token operator\">&lt;</span>Dog<span class=\"token operator\">></span> <span class=\"token comment\">// never</span>\n\n<span class=\"token comment\">// 예시 2</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Flatten<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token builtin\">any</span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">?</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> <span class=\"token constant\">T</span>\n\n<span class=\"token comment\">// Extracts out the element type.</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Str</span> <span class=\"token operator\">=</span> Flatten<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token comment\">// type Str = string</span>\n\n<span class=\"token comment\">// Leaves the type alone.</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Num</span> <span class=\"token operator\">=</span> Flatten<span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token operator\">></span> <span class=\"token comment\">// type Num = number</span></code></pre></div>\n<h3>Infer와 함께 사용하기</h3>\n<p><code class=\"language-text\">infer</code>는 타입스크립트에서 타입을 추론하는 키워드이다. <code class=\"language-text\">infer</code>를 사용하면 조건부 타입을 사용해 동적으로 타입을 추론할 때 유용하게 사용할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// 예시1</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Flatten<span class=\"token operator\">&lt;</span>Type<span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> Type <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">infer</span> Item<span class=\"token operator\">></span></span> <span class=\"token operator\">?</span> Item <span class=\"token operator\">:</span> Type\n\n<span class=\"token comment\">//예시2</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">GetReturnType<span class=\"token operator\">&lt;</span>Type<span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> Type <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token operator\">:</span> <span class=\"token builtin\">never</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">infer</span> Return\n  <span class=\"token operator\">?</span> Return\n  <span class=\"token operator\">:</span> <span class=\"token builtin\">never</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Num</span> <span class=\"token operator\">=</span> GetReturnType<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">number</span><span class=\"token operator\">></span> <span class=\"token comment\">// number</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Str</span> <span class=\"token operator\">=</span> GetReturnType<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">string</span><span class=\"token operator\">></span> <span class=\"token comment\">// string</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Bools</span> <span class=\"token operator\">=</span> GetReturnType<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token comment\">// boolean[]</span></code></pre></div>\n<p>예시 2를 보면 함수의 반환타입을 동적으로 변경할 수 있게 infer를 이용해 추론한 예제다.</p>\n<h3>Distributive Conditional Types</h3>\n<p>Distributive Conditional Types는 조건부 타입이 사용될 때 전달되는 타입이 <code class=\"language-text\">union</code>으로 구성되어 있으면 각각의 타입에 조건부 타입을 적용한 후 <code class=\"language-text\">union</code>으로 다시 합쳐진다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">ToArray<span class=\"token operator\">&lt;</span>Type<span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> Type <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token builtin\">any</span></span> <span class=\"token operator\">?</span> Type<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> <span class=\"token builtin\">never</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">StrArrOrNumArr</span> <span class=\"token operator\">=</span> ToArray<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">number</span><span class=\"token operator\">></span> <span class=\"token comment\">// string[] | number[]</span></code></pre></div>","frontmatter":{"title":"Typescript: Conditional Types","date":"December 19, 2023","tags":["typescript"],"series":"Typescript"},"fields":{"slug":"/2023-12-19-conditional-types/","readingTime":{"minutes":2.545}}},"seriesList":{"edges":[{"node":{"id":"e4afb978-51d0-558a-8fac-8eb97d2a2763","fields":{"slug":"/2023-01-02-타입스크립트란/"},"frontmatter":{"title":"TS study: 타입스크립트란"}}},{"node":{"id":"bb1c9c90-fc11-564c-b727-6c9928d01454","fields":{"slug":"/2023-01-07-타입시스템-1/"},"frontmatter":{"title":"TS study: 타입시스템 (1)"}}},{"node":{"id":"45594d13-5cde-58b7-becf-86a6f7ad0569","fields":{"slug":"/2023-01-10-타입시스템-2/"},"frontmatter":{"title":"TS study: 타입 시스템 (2)"}}},{"node":{"id":"c5af547a-22ba-513d-ad11-390454722177","fields":{"slug":"/2023-01-16-타입시스템-3/"},"frontmatter":{"title":"TS study: 타입 시스템 (3)"}}},{"node":{"id":"9f936319-cd88-5b63-b39e-75df052551f4","fields":{"slug":"/2023-01-24-타입추론 (1)/"},"frontmatter":{"title":"TS study: 타입 추론(1)"}}},{"node":{"id":"80cde9be-da0c-5c6b-acc8-d45547b96aa0","fields":{"slug":"/2023-10-16-the_Basics/"},"frontmatter":{"title":"Typescript: The Basics"}}},{"node":{"id":"9910c49d-f3d2-5a90-894e-324c868332cf","fields":{"slug":"/2023-10-18-Narrowing/"},"frontmatter":{"title":"Typescript: Narrowing"}}},{"node":{"id":"228a2c10-6f85-5211-bd1e-5efa48a65e5c","fields":{"slug":"/2023-10-17-Everyday-Types/"},"frontmatter":{"title":"Typescript: EveryDay Types"}}},{"node":{"id":"4891d21f-441e-5651-a65d-a38aea282bfc","fields":{"slug":"/2023-10-23-MoreOnFunctions/"},"frontmatter":{"title":"Typescript: More On Functions"}}},{"node":{"id":"c2a60f21-344c-5617-9e23-098da34ba0ab","fields":{"slug":"/2023-10-31-Object-Types/"},"frontmatter":{"title":"Typescript: Object Types"}}},{"node":{"id":"0f40ef0b-b850-516a-9f30-5b7e0a8896c3","fields":{"slug":"/2023-11-07-Generics/"},"frontmatter":{"title":"Typescript: Generics"}}},{"node":{"id":"d6ab523a-3829-5c6a-a25e-50d272e4823d","fields":{"slug":"/2023-11-16-keyof,typeof, indexed Access Types/"},"frontmatter":{"title":"Typescript: Keyof, TypeOf, Indexed"}}},{"node":{"id":"7a9a6af1-4b1e-5433-bb68-e8ae4c84e2c0","fields":{"slug":"/2023-12-19-conditional-types/"},"frontmatter":{"title":"Typescript: Conditional Types"}}}]},"previous":{"fields":{"slug":"/2023-12-02-2023년-11월회고/"},"frontmatter":{"title":"😃 2023년 11월 회고"}},"next":{"fields":{"slug":"/2023-12-31-2023년-12월회고/"},"frontmatter":{"title":"🌟 2023년 12월 회고"}}},"pageContext":{"id":"7a9a6af1-4b1e-5433-bb68-e8ae4c84e2c0","series":"Typescript","previousPostId":"a2a6e999-a53d-5e52-aae6-d57a75673c5f","nextPostId":"ee90f174-21d6-5bbf-b2cf-6fd226bc9353"}},"staticQueryHashes":[],"slicesMap":{}}