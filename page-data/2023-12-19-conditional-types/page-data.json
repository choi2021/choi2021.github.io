{"componentChunkName":"component---src-templates-post-jsx","path":"/2023-12-19-conditional-types/","result":{"data":{"site":{"siteMetadata":{"title":"Troy DevLog"}},"markdownRemark":{"id":"dab6e2de-2654-5d7c-be1b-8f852db76d25","excerpt":"Conditional Types 🤩 타입스크립트에서 조건부 타입은 와 같은 형태로 사용된다. 이는 가 에 할당 가능한지에 따라서 와 중 하나의 타입을 선택하게 된다. 이러한 모습은 기존 javascript의 삼항연산자와 유사하게 느껴진다.  Generic과 함께 사용하기 Generic과 함께 사용하면 더 유용하게 사용할 수 있다. 다음 예제를 보자. In…","html":"<h2>Conditional Types 🤩</h2>\n<p>타입스크립트에서 조건부 타입은 <code class=\"language-text\">T extends U ? X : Y</code>와 같은 형태로 사용된다. 이는 <code class=\"language-text\">T</code>가 <code class=\"language-text\">U</code>에 할당 가능한지에 따라서 <code class=\"language-text\">X</code>와 <code class=\"language-text\">Y</code>중 하나의 타입을 선택하게 된다.</p>\n<p>이러한 모습은 기존 javascript의 삼항연산자와 유사하게 느껴진다. <code class=\"language-text\">(condition ? trueExpression : falseExpression)</code></p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">live</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Dog</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">woof</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n \n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Example1</span> <span class=\"token operator\">=</span> Dog <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Animal</span> <span class=\"token operator\">?</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// type Example1 = number</span>\n        \n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Example2</span> <span class=\"token operator\">=</span> RegExp <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Animal</span> <span class=\"token operator\">?</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// type Example2 = string</span></code></pre></div>\n<h3>Generic과 함께 사용하기</h3>\n<p>Generic과 함께 사용하면 더 유용하게 사용할 수 있다. 다음 예제를 보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// 예시 1  </span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">MessageOf<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">{</span> message<span class=\"token operator\">:</span> <span class=\"token builtin\">unknown</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">?</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"message\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> <span class=\"token builtin\">never</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Email</span> <span class=\"token punctuation\">{</span>\n    message<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Dog</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">bark</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">EmailMessageContents</span> <span class=\"token operator\">=</span> MessageOf<span class=\"token operator\">&lt;</span>Email<span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// string</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">DogMessageContents</span> <span class=\"token operator\">=</span> MessageOf<span class=\"token operator\">&lt;</span>Dog<span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// never</span>\n\n<span class=\"token comment\">// 예시 2</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Flatten<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token builtin\">any</span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">?</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Extracts out the element type.</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Str</span> <span class=\"token operator\">=</span> Flatten<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// type Str = string</span>\n\n<span class=\"token comment\">// Leaves the type alone.</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Num</span> <span class=\"token operator\">=</span> Flatten<span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// type Num = number</span></code></pre></div>\n<h3>Infer와 함께 사용하기</h3>\n<p><code class=\"language-text\">infer</code>는 타입스크립트에서 타입을 추론하는 키워드이다. <code class=\"language-text\">infer</code>를 사용하면 조건부 타입을 사용해 동적으로 타입을 추론할 때 유용하게 사용할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// 예시1</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Flatten<span class=\"token operator\">&lt;</span>Type<span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> Type <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">infer</span> Item<span class=\"token operator\">></span></span> <span class=\"token operator\">?</span> Item <span class=\"token operator\">:</span> Type<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//예시2</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">GetReturnType<span class=\"token operator\">&lt;</span>Type<span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> Type <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token operator\">:</span> <span class=\"token builtin\">never</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">infer</span> Return\n  <span class=\"token operator\">?</span> Return\n  <span class=\"token operator\">:</span> <span class=\"token builtin\">never</span><span class=\"token punctuation\">;</span>\n \n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Num</span> <span class=\"token operator\">=</span> GetReturnType<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">number</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// number</span>\n \n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Str</span> <span class=\"token operator\">=</span> GetReturnType<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">string</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// string</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Bools</span> <span class=\"token operator\">=</span> GetReturnType<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// boolean[]</span></code></pre></div>\n<p>예시 2를 보면 함수의 반환타입을 동적으로 변경할 수 있게 infer를 이용해 추론한 예제다.</p>\n<h3>Distributive Conditional Types</h3>\n<p>Distributive Conditional Types는 조건부 타입이 사용될 때 전달되는 타입이 <code class=\"language-text\">union</code>으로 구성되어 있으면 각각의 타입에 조건부 타입을 적용한 후 <code class=\"language-text\">union</code>으로 다시 합쳐진다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">ToArray<span class=\"token operator\">&lt;</span>Type<span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> Type <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token builtin\">any</span></span> <span class=\"token operator\">?</span> Type<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> <span class=\"token builtin\">never</span><span class=\"token punctuation\">;</span>\n \n<span class=\"token keyword\">type</span> <span class=\"token class-name\">StrArrOrNumArr</span> <span class=\"token operator\">=</span> ToArray<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">number</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// string[] | number[]</span></code></pre></div>","frontmatter":{"title":"Typescript: Conditional Types","date":"December 19, 2023","tags":["typescript"],"series":"Typescript"},"fields":{"slug":"/2023-12-19-conditional-types/","readingTime":{"minutes":2.545}}},"seriesList":{"edges":[{"node":{"id":"450c65d9-1adb-5355-86a6-38e29edf10f5","fields":{"slug":"/2023-01-02-타입스크립트란/"},"frontmatter":{"title":"TS study: 타입스크립트란"}}},{"node":{"id":"30f66428-af72-5c78-bf83-6adedb7f226b","fields":{"slug":"/2023-01-07-타입시스템-1/"},"frontmatter":{"title":"TS study: 타입시스템 (1)"}}},{"node":{"id":"8a0f9e55-e3e4-5418-a3a4-72acabfe070a","fields":{"slug":"/2023-01-10-타입시스템-2/"},"frontmatter":{"title":"TS study: 타입 시스템 (2)"}}},{"node":{"id":"34de2078-05c8-5c18-ad6f-b50da3d61695","fields":{"slug":"/2023-01-16-타입시스템-3/"},"frontmatter":{"title":"TS study: 타입 시스템 (3)"}}},{"node":{"id":"c3a5ecab-ca1d-5597-a321-d4b866d72a4c","fields":{"slug":"/2023-01-24-타입추론 (1)/"},"frontmatter":{"title":"TS study: 타입 추론(1)"}}},{"node":{"id":"526d83da-deee-5851-bd4d-6ed71de266f8","fields":{"slug":"/2023-10-16-the_Basics/"},"frontmatter":{"title":"Typescript: The Basics"}}},{"node":{"id":"dcf311da-09d1-555a-8978-5c8cbd09f3e4","fields":{"slug":"/2023-10-17-Everyday-Types/"},"frontmatter":{"title":"Typescript: EveryDay Types"}}},{"node":{"id":"b8ceb0c1-25a0-51d0-ab4e-86977a6e3643","fields":{"slug":"/2023-10-18-Narrowing/"},"frontmatter":{"title":"Typescript: Narrowing"}}},{"node":{"id":"8fe67159-cfd9-54bf-b268-55dd2267c9b3","fields":{"slug":"/2023-10-23-MoreOnFunctions/"},"frontmatter":{"title":"Typescript: More On Functions"}}},{"node":{"id":"9655a307-90e6-5c82-b302-c3a78bf59193","fields":{"slug":"/2023-10-31-Object-Types/"},"frontmatter":{"title":"Typescript: Object Types"}}},{"node":{"id":"888c4fe2-471c-5bb5-9d97-5ae433bbe9c8","fields":{"slug":"/2023-11-07-Generics/"},"frontmatter":{"title":"Typescript: Generics"}}},{"node":{"id":"afbe0b5e-070e-5dd2-9c94-200338d5851d","fields":{"slug":"/2023-11-16-keyof,typeof, indexed Access Types/"},"frontmatter":{"title":"Typescript: Keyof, TypeOf, Indexed"}}},{"node":{"id":"dab6e2de-2654-5d7c-be1b-8f852db76d25","fields":{"slug":"/2023-12-19-conditional-types/"},"frontmatter":{"title":"Typescript: Conditional Types"}}}]},"previous":{"fields":{"slug":"/2023-12-02-2023년-11월회고/"},"frontmatter":{"title":"😃 2023년 11월 회고"}},"next":{"fields":{"slug":"/2023-12-31-2023년-12월회고/"},"frontmatter":{"title":"🌟 2023년 12월 회고"}}},"pageContext":{"id":"dab6e2de-2654-5d7c-be1b-8f852db76d25","series":"Typescript","previousPostId":"01c028b9-d56c-52a8-8719-eb5cbcf6ea70","nextPostId":"e696cf5b-451a-5fe0-a2cb-100a22d3d356"}},"staticQueryHashes":[],"slicesMap":{}}