{"componentChunkName":"component---src-templates-post-jsx","path":"/2022-10-11-원티드프리온보딩과제7/","result":{"data":{"site":{"siteMetadata":{"title":"Troy DevLog"}},"markdownRemark":{"id":"29625880-cc86-526b-b650-b9bc8ee7d16c","excerpt":"1. 최적화와 배포 에러 핸들링을 하기 전에 내일까지 배포하는 것이 목표이기 때문에 그전에 여태까지 한 작업들을 최적화하고 배포를 먼저 한 후에 readme작성을 하게 되었다. 우선 최적화는 memo와 useCallback을 이용해 auth와 todo페이지의 불필요한 re-rendering을 막았다. 1.1 auth 페이지 ​ auth 페이지에서는 회원가…","html":"<h2>1. 최적화와 배포</h2>\n<p>에러 핸들링을 하기 전에 내일까지 배포하는 것이 목표이기 때문에 그전에 여태까지 한 작업들을 최적화하고 배포를 먼저 한 후에 readme작성을 하게 되었다.</p>\n<p>우선 최적화는 memo와 useCallback을 이용해 auth와 todo페이지의 불필요한 re-rendering을 막았다.</p>\n<h4>1.1 auth 페이지</h4>\n<p>​ auth 페이지에서는 회원가입 form과 로그인 form이 같이 존재하고 상태가 변하면 authForm 내부 모두가 다시 실행되기 때문에, 모든 input들이 re-rendering되는 모습을 보였다. 이를 해결하기 위해서 input을 컴포넌트로 만들어서 각 컴포넌트에 주입되는 함수나 props가 바뀌는 게 아니면 업데이트 되지 않게 해주었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"react\"><pre class=\"language-react\"><code class=\"language-react\">//이전 코드\n\nfunction AuthForm({\n  process,\n  onSubmit,\n  onChange,\n  message,\n  setMessage,\n  info,\n  setInfo,\n}) {\n\t...\n   return (\n    &lt;S.AuthFormLayout onSubmit={handleSubmit}&gt;\n      &lt;h1&gt;{process === &#39;login&#39; ? &#39;로그인&#39; : &#39;회원가입&#39;}&lt;/h1&gt;\n      &lt;div&gt;\n        &lt;label htmlFor={`${process}_email`}&gt;Email&lt;/label&gt;\n        &lt;S.AuthInput\n          name=&#39;email&#39;\n          onChange={handleChange}\n          id={`${process}_email`}\n          placeholder=&#39;아이디를 입력해주세요&#39;\n        &gt;&lt;/S.AuthInput&gt;\n      &lt;/div&gt;\n      &lt;div&gt;\n        &lt;label htmlFor={`${process}_password`}&gt;Password&lt;/label&gt;\n        &lt;S.AuthInput\n          name=&#39;password&#39;\n          onChange={handleChange}\n          id={`${process}_password`}\n          placeholder=&#39;비밀번호를 입력해주세요&#39;\n        &gt;&lt;/S.AuthInput&gt;\n      &lt;/div&gt;\n      {message.message ? (\n        &lt;S.Message success={message.success}&gt;{message.message}&lt;/S.Message&gt;\n      ) : null}\n      &lt;S.SubmitBtn\n        onSubmit={handleSubmit}\n        disabled={!(info.isEmailValid &amp;&amp; info.isPasswordValid)}\n      &gt;\n        {process === &#39;login&#39; ? &#39;로그인&#39; : &#39;회원가입&#39;}\n      &lt;/S.SubmitBtn&gt;\n    &lt;/S.AuthFormLayout&gt;\n  );\n}\nexport default AuthForm\n\n//수정 이후 코드\n\nfunction AuthForm({\n  process,\n  onSubmit,\n  onChange,\n  message,\n  setMessage,\n  info,\n  setInfo,\n}) {\n\n\t...\n\n  return (\n    &lt;S.AuthFormLayout onSubmit={handleSubmit}&gt;\n      &lt;h1&gt;{process === &#39;login&#39; ? &#39;로그인&#39; : &#39;회원가입&#39;}&lt;/h1&gt;\n      &lt;AuthInput\n        onChange={handleChange}\n        process={process}\n        name={&#39;email&#39;}\n      &gt;&lt;/AuthInput&gt;\n      &lt;AuthInput\n        onChange={handleChange}\n        process={process}\n        name={&#39;password&#39;}\n      &gt;&lt;/AuthInput&gt;\n      {message.message ? (\n        &lt;S.Message success={message.success}&gt;{message.message}&lt;/S.Message&gt;\n      ) : null}\n      &lt;S.SubmitBtn\n        onSubmit={handleSubmit}\n        disabled={!(info.isEmailValid &amp;&amp; info.isPasswordValid)}\n      &gt;\n        {process === &#39;login&#39; ? &#39;로그인&#39; : &#39;회원가입&#39;}\n      &lt;/S.SubmitBtn&gt;\n    &lt;/S.AuthFormLayout&gt;\n  );\n}\n\n//AuthInput\nimport React, { memo } from &#39;react&#39;;\nimport S from &#39;./styles&#39;;\n\nfunction AuthInput({ onChange, process, name }) {\n  return (\n    &lt;div&gt;\n      &lt;label htmlFor={`${process}_email`}&gt;{name}&lt;/label&gt;\n      &lt;S.AuthInput\n        name={name}\n        onChange={onChange}\n        id={`${process}_email`}\n        placeholder=&#39;아이디를 입력해주세요&#39;\n      &gt;&lt;/S.AuthInput&gt;\n    &lt;/div&gt;\n  );\n}\n\nexport default memo(AuthInput);</code></pre></div>\n<p>컴포넌트로 authInput을 만들고 AuthInput을 memo로, onChange함수를 useCallback을 이용해 메모리에 저장해둠으로써 해당 input이 아닌데도 업데이트되는 부분을 막을 수 있었다. 그리고 이름을 styled-component의 convention을 정해놓으니 겹치지 않아서 더 편리하게 naming할 수 있었다.</p>\n<p>​ input들의 리랜더링은 막았지만 회원가입부분을 작성하는데 로그인 부분이 업데이트 되는 모습이 보였다. 불필요한 re-rendering이기 때문에 AuthForm도 똑같이 memo로, AuthForm에게 전달되는 함수인 onSubmit, onChange, exceptionTest을 useCallback을 이용해 메모리에 저장해 동일하게 불필요한 re-rendering을 막았다.</p>\n<p><img src=\"/assets/img/2022-10-11-%EC%9B%90%ED%8B%B0%EB%93%9C%20%ED%94%84%EB%A6%AC%EC%98%A8%EB%B3%B4%EB%94%A9%20%EA%B3%BC%EC%A0%9C%207%ED%8E%B8/Pre-Course%20-%20Chrome%202022-10-11%2023-16-04.gif\" alt=\"Pre-Course - Chrome 2022-10-11 23-16-04\"></p>\n<h4>1.2 Todo 페이지</h4>\n<p>​ todo페이지에서는 각 Todo를 수정하면 해당 todo를 제외한 나머지 todo들과 함께 전체적으로 re-rendering이 되기 때문에 Auth와 동일하게 관련 함수인 onUpdate와 onDelete를 useCallback으로, TodoItem은 memo를 이용해 메모리에 저장해 불필요한 re-rendering을 막았다.</p>\n<p>​ todo를 생성하는 input의 경우 Todo 전체 파일에 있게 되면 계속해서 업데이트되기 때문에 따로 컴포넌트화 시켜 memo로 저장한 후에 prop으로 전달해주는 함수들을 useCallback으로 메모리에 저장해 불필요한 re-rendering을 막았다.</p>\n<div class=\"gatsby-highlight\" data-language=\"react\"><pre class=\"language-react\"><code class=\"language-react\">import React, { memo, useRef } from &#39;react&#39;;\nimport S from &#39;./styles&#39;;\n\nfunction TodoForm({ onSubmit, isBlank }) {\n  const inputRef = useRef();\n  const handleSubmit = (e) =&gt; {\n    onSubmit(e, inputRef);\n  };\n  return (\n    &lt;S.TodoForm onSubmit={handleSubmit}&gt;\n      &lt;input\n        ref={inputRef}\n        type=&#39;text&#39;\n        id=&#39;todoInput&#39;\n        placeholder={\n          isBlank ? &#39;내용이 비어있습니다.😅&#39; : &#39;오늘의 투두를 작성해주세요😀&#39;\n        }\n      /&gt;\n      &lt;button&gt;Add&lt;/button&gt;\n    &lt;/S.TodoForm&gt;\n  );\n}\n\nexport default memo(TodoForm);</code></pre></div>\n<p><img src=\"/assets/img/2022-10-11-%EC%9B%90%ED%8B%B0%EB%93%9C%20%ED%94%84%EB%A6%AC%EC%98%A8%EB%B3%B4%EB%94%A9%20%EA%B3%BC%EC%A0%9C%207%ED%8E%B8/Pre-Course%20-%20Chrome%202022-10-11%2023-26-52.gif\" alt=\"Pre-Course - Chrome 2022-10-11 23-26-52\"></p>\n<h2>2. Netlify를 이용한 배포</h2>\n<p>​ Netlify를 이용해서 배포하는 것은 create-react-app 공식 홈페이지에 잘 안내되어있기 때문에 크게 어려움은 없었지만 Github page로 배포할 때와 동일하게 새로고침을 하게되면 에러가 발생했다. netlify를 이용한 게 github pages에서 발생했던 동일한 에러 때문이었는데.... 역시 한번 마주한 에러를 해결하지 않으면 결국엔 돌아와서 똑같이 괴롭히는 것 같다. 이번 기회에 확실히 해결하고 넘어가고자 한다.</p>\n<p>[ Todo 화면에서 새로고침 후 화면]</p>\n<p><img src=\"../assets/img/2022-10-11-%EC%9B%90%ED%8B%B0%EB%93%9C%20%ED%94%84%EB%A6%AC%EC%98%A8%EB%B3%B4%EB%94%A9%20%EA%B3%BC%EC%A0%9C%207%ED%8E%B8/image-20221011234911952.png\" alt=\"image-20221011234911952\"></p>\n<p>​ 생각보다 해결방법은 간단하게 CRA 공식홈페이지 deploy부분에 설명되어있었다.</p>\n<p><img src=\"/assets/img/2022-10-11-%EC%9B%90%ED%8B%B0%EB%93%9C%20%ED%94%84%EB%A6%AC%EC%98%A8%EB%B3%B4%EB%94%A9%20%EA%B3%BC%EC%A0%9C%207%ED%8E%B8/image-20221011235510629.png\" alt=\"image-20221011235510629\"></p>\n<p>에러가 난 이유는 내가 만든 프로젝트는 Single-page-application(SPA)이다. SPA의 경우 하나의 index.html을 갖고 모든 일이 index.html에서 이루어지기 때문에 \"/\"가 아닌 \"/todo\"에서 새로고침을 하게 되면 <strong>해당 url에서는 index.html을 불러올 수 없기 때문에</strong> 에러 페이지를 보여주게 되었다. 이를 해결하기 위해서 netlify는 위의 설명과 같은 방법을 안내해주고 public 폴더에 _redierects라는 파일을 만들어 해당 코드를 그대로 적어주면 해결 할 수 있다.</p>\n<p><img src=\"/assets/img/2022-10-11-%EC%9B%90%ED%8B%B0%EB%93%9C%20%ED%94%84%EB%A6%AC%EC%98%A8%EB%B3%B4%EB%94%A9%20%EA%B3%BC%EC%A0%9C%207%ED%8E%B8/Pre-Course%20-%20Chrome%202022-10-11%2023-59-46.gif\" alt=\"Pre-Course - Chrome 2022-10-11 23-59-46\"></p>\n<p>끝으로 github pages에 대해서도 알아보았는데 github pages는 SPA를 지원하지 않아 라우팅이 불가능한 문제점을 갖고 있다. 그래서 404.html을 만들고 CI에서 빌드시에 index.html을 404.html로 옮겨서 다시 index.html내용을 보여주는 형식으로 처리한다고 한다.</p>\n<p><a href=\"https://velog.io/@heyoon/github-pages%EC%97%90%EC%84%9C-%EB%9D%BC%EC%9A%B0%ED%8C%85%EB%90%9C-%ED%8E%98%EC%9D%B4%EC%A7%80%EC%97%90%EC%84%9C-%EC%83%88%EB%A1%9C%EA%B3%A0%EC%B9%A8%EC%8B%9C-404%ED%8E%98%EC%9D%B4%EC%A7%80%EB%A5%BC-%EB%B0%98%ED%99%98%ED%95%A9%EB%8B%88%EB%8B%A4\">참고:heyeon.log velog </a></p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token comment\"># CI 설정파일</span>\n<span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Install and Build 🔧\n        <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">|</span><span class=\"token scalar string\">\n          npm install\n          npm run build\n          cp dist/index.html dist/404.html</span></code></pre></div>\n<p>위의 방식으로 기존 github pages로 만들었던 프로젝트들을 해결해봐야겠다고 생각했다.</p>","frontmatter":{"title":"원티드 프리온보딩 과제-리팩토링:최적화,netlify를 이용한 배포","date":"October 11, 2022","tags":["원티드프리온보딩"],"series":"원티드프리온보딩"},"fields":{"slug":"/2022-10-11-원티드프리온보딩과제7/","readingTime":{"minutes":7.37}}},"seriesList":{"edges":[{"node":{"id":"f7e153bc-b4a1-5c03-9372-06e76a5da423","fields":{"slug":"/2022-10-04-원티드 프리온보딩 과제 1편/"},"frontmatter":{"title":"원티드 프리온보딩 사전과제-과제 1,2"}}},{"node":{"id":"7ae817c7-3e3f-5597-a1ce-80840e62462b","fields":{"slug":"/2022-10-05-원티드-프리온보딩-과제-2편/"},"frontmatter":{"title":"원티드 프리온보딩 사전과제-과제 2,3"}}},{"node":{"id":"d036a290-e927-5383-8b1d-993a8ed8c794","fields":{"slug":"/2022-10-06-원티드 프리온보딩 과제 3편/"},"frontmatter":{"title":"원티드 프리온보딩 사전과제-과제 3편"}}},{"node":{"id":"3e41dc8a-b610-5427-bfe4-9a9c3557bffb","fields":{"slug":"/2022-10-08-원티드프리온보딩과제4/"},"frontmatter":{"title":"원티드 프리온보딩 과제-login/register 컴포넌트화"}}},{"node":{"id":"73a3c928-fa52-5501-9938-8eece83ae45c","fields":{"slug":"/2022-10-09-원티드프리온보딩과제5/"},"frontmatter":{"title":"원티드 프리온보딩 과제-폴더 구조 수정"}}},{"node":{"id":"e5737f1b-7b44-5548-9a92-a0d99e8821bb","fields":{"slug":"/2022-10-10-원티드프리온보딩과제6/"},"frontmatter":{"title":"원티드 프리온보딩 과제-HTTP에러정리, fetch 에러핸들링 시도"}}},{"node":{"id":"29625880-cc86-526b-b650-b9bc8ee7d16c","fields":{"slug":"/2022-10-11-원티드프리온보딩과제7/"},"frontmatter":{"title":"원티드 프리온보딩 과제-리팩토링:최적화,netlify를 이용한 배포"}}},{"node":{"id":"f6746d99-0c3c-57b2-8b10-1f2d3770e2c3","fields":{"slug":"/2022-10-12-원티드프리온보딩과제8/"},"frontmatter":{"title":"원티드 프리온보딩 과제-리팩토링:todoBtn 컴포넌트 분리,에러핸들링"}}},{"node":{"id":"e6aa9c8d-2e3a-55ea-ae9e-f8eca03b270e","fields":{"slug":"/2022-10-13-원티드 프리온보딩사전과제회고/"},"frontmatter":{"title":"원티드 프리온보딩 사전과제-회고"}}},{"node":{"id":"dafe14dd-c51d-5ae4-a73c-ae39cf910b4d","fields":{"slug":"/2022-10-25-원티드프리온보딩-1주차-1일/"},"frontmatter":{"title":"원티드 프리온보딩 1주차 1-1 협력툴:ESLint,Prettier,Git Hook, Husky"}}},{"node":{"id":"e35bbcaa-e695-518d-b955-34ad7f1b073f","fields":{"slug":"/2022-10-25-원티드프리온보딩-1주차-2일/"},"frontmatter":{"title":"원티드 프리온보딩 1주차 첫째주 과제-best case찾기와 보충공부:context API"}}},{"node":{"id":"fc36457b-4432-5eae-9056-606dfb375804","fields":{"slug":"/2022-10-27-원티드 프리온보딩-1주-3일차/"},"frontmatter":{"title":"원티드 프리온보딩 1주차 첫째주 과제 3일차-best case 프로젝트 회고"}}},{"node":{"id":"81e94920-65df-5f6b-b854-2701c616bcc7","fields":{"slug":"/2022-10-28-원티드 프리온보딩-1주차-4일/"},"frontmatter":{"title":"원티드 프리온보딩 1주차 첫째주 4일차-초기세팅 커밋 합치기"}}},{"node":{"id":"9f2e1dec-5bb3-514e-809b-4ab032184b86","fields":{"slug":"/2022-10-31-원티드 프리온보딩-1-2-과제-회고/"},"frontmatter":{"title":"원티드 프리온보딩 1-2 과제회고"}}},{"node":{"id":"5cac3131-6374-547f-b2c8-96e0f6084594","fields":{"slug":"/2022-11-04-원티드 프리온보딩-2-1-과제-회고/"},"frontmatter":{"title":"원티드 프리온보딩 2-1 과제회고"}}},{"node":{"id":"15f55c7c-3142-5102-a046-55582836a60a","fields":{"slug":"/2022-11-07-원티드 프리온보딩-2-2-과제-회고/"},"frontmatter":{"title":"원티드 프리온보딩 2-2 과제회고"}}},{"node":{"id":"20495c35-f22e-531b-b308-329bd9305a00","fields":{"slug":"/2022-11-11-원티드 프리온보딩-3-1-과제-회고/"},"frontmatter":{"title":"원티드 프리온보딩 3-1 과제회고"}}},{"node":{"id":"4659ef8b-53a8-5f72-bbe8-967b2b76f5b7","fields":{"slug":"/2022-11-19-원티드-프리온보딩-마지막 과제회고/"},"frontmatter":{"title":"원티드 프리온보딩 마지막 과제회고"}}}]},"previous":{"fields":{"slug":"/2022-10-10-원티드프리온보딩과제6/"},"frontmatter":{"title":"원티드 프리온보딩 과제-HTTP에러정리, fetch 에러핸들링 시도"}},"next":{"fields":{"slug":"/2022-10-12-원티드프리온보딩과제8/"},"frontmatter":{"title":"원티드 프리온보딩 과제-리팩토링:todoBtn 컴포넌트 분리,에러핸들링"}}},"pageContext":{"id":"29625880-cc86-526b-b650-b9bc8ee7d16c","series":"원티드프리온보딩","previousPostId":"e5737f1b-7b44-5548-9a92-a0d99e8821bb","nextPostId":"f6746d99-0c3c-57b2-8b10-1f2d3770e2c3"}},"staticQueryHashes":[],"slicesMap":{}}