{"componentChunkName":"component---src-templates-series-jsx","path":"/series/Typescript/","result":{"data":{"posts":{"nodes":[{"excerpt":"타입스크립트로 기본적인 타입을 정하고 사용하고 있지만, 매번 막히는 문제들과 잘 사용하는 기준을 세우기 위해 이펙티브 타입스크립트를 읽고 정리해나가려 한다. 🙄 타입 스크립트란 타입스크립트의 인기는 갈수록 증가하고 있다. 왜 타입스크립트가 인기가 높아지고 있는지에 개인적으로 생각해보면 과 과  총 세 가지라고 생각한다. 타입스크립트란 어떤 언어인지, 왜 …","fields":{"slug":"/2023-01-02-타입스크립트란/"},"frontmatter":{"date":"January 02, 2023","title":"TS study: 타입스크립트란","tags":["typescript"]}},{"excerpt":"🎚 타입시스템 타입 시스템은 타입스크립트를 사용하는 큰 이유 중 하나다. 타입을 통해 안전하고 효율적으로 코드를 작성할 수 있게 도와주기 때문에 타입스크립트를 잘한다는 것의 의미가 현재 에 있다. 그렇기 때문에 최대한 구체적으로 타입을 정의하기 위해 타입시스템에 대해 알아보자 🤔 타입 추론 타입스크립트는 똑똑하기 때문에 우리가 작성한 코드에 명시적으로 전…","fields":{"slug":"/2023-01-07-타입시스템-1/"},"frontmatter":{"date":"January 07, 2023","title":"TS study: 타입시스템 (1)","tags":["typescript"]}},{"excerpt":"🎚 타입 시스템(2) 타입스크립트의 타입 시스템 중 객체 래퍼 타입, 잉여 속성 체크, 함수 표현식, 타입과 인터페이스의 차이에 대해서 정리해보자 한다. 📦 객체 래퍼 타입 문자열을 입력하고 을 찍으면 객체처럼 우리는 다양한 메소드를 이용할 수 있다. 이렇게 가능한 것은 자바스크립트가 을 찍는 순간 에서  객체 래퍼로 타입변환이 이루어진다. 객체로 변환해…","fields":{"slug":"/2023-01-10-타입시스템-2/"},"frontmatter":{"date":"January 10, 2023","title":"TS study: 타입 시스템 (2)","tags":["typescript"]}},{"excerpt":"🎚 타입 시스템(3) 타입시스템에 대한 정리 중 마지막으로 제네릭, 인덱스 시그니처, Array 타입과 readonly에 대해 정리해보려 한다. 🕹 제네릭 타입스크립트를 사용할 수록 느끼는 점은 타입을 다룬다는 것은 추가적인 변수와 함수를 다루는 것 같았다. 그 이유는 변수를 재 사용하고 반복되는 로직은 함수로 분리하듯 타입의 재사용성을 고려해야 했기 때…","fields":{"slug":"/2023-01-16-타입시스템-3/"},"frontmatter":{"date":"January 16, 2023","title":"TS study: 타입 시스템 (3)","tags":["typescript"]}},{"excerpt":"🙋‍♂️ 타입추론 타입추론은 타입스크립트가 우리가 작성한 코드에 대해서 자동으로 타입을 추론해주는 것을 의미한다. 위 person 예제를 보면서 타입 추론이 정확하게 작동하고 있는 것을 볼 수 있다. 타입 추론을 이용했을 때 더 정확하게 타입이 정해지거나, 굳이 명시적으로 타입을 정할 필요가 없을 때에는 타입 구문을 생략하는 게 가독성을 높여준다. 위 예제에서…","fields":{"slug":"/2023-01-24-타입추론 (1)/"},"frontmatter":{"date":"January 24, 2023","title":"TS study: 타입 추론(1)","tags":["typescript"]}},{"excerpt":"🧐 타입스크립트를 아세요? 타입스크립트는 내가 매일 사용하지만 나에게 \"타입스크립트를 잘아세요?\"라고 한다면 나는 \"그... 쓸줄은 알아요\"라고만 말할 수 있을 것 같다. 그러면 잘하려면 어떻게 해야할까를 고민해 봤을 때, 나에게 들었던 생각은 \"고개를 들어 공식문서를를 보게하라\"였다. 공식문서 한번 읽지 않고 얼마나 잘할 수 있을까, 책보다도 더 빠르게…","fields":{"slug":"/2023-10-16-the_Basics/"},"frontmatter":{"date":"October 16, 2023","title":"Typescript: The Basics","tags":["typescript"]}},{"excerpt":"타입 좁히기😎 타입스크립트를 이용하면서 다양한 타입을 사용하다보면 확장성을 고려하거나 다양한 타입이 될 수 있다고 정의하는 경우가 많다. 이때 너무 넓은 타입으로 정의될 경우에는 공통된 속성과 메소드만 사용할 수 있기 때문에 이를 방지하기 위해 전달 받을 때는 넓히돼, 사용할 때는 우리가 원하는 타입으로 좁혀줘야 한다. \n위의 예제는 은 repeat 메소…","fields":{"slug":"/2023-10-18-Narrowing/"},"frontmatter":{"date":"October 17, 2023","title":"Typescript: Narrowing","tags":["typescript"]}},{"excerpt":"Everyday Types 😊 이제 기본적인 타입스크립트의 타입들에 대해 알아보자. 대부분 기본적인 부분이라 크게 정리할 부분은 없었다. Primitive 자바스크립트의 기본 타입들인 이 동일하게 타입스크립트에서 사용된다. Arrays 배열은 두가지로 표현할 수 있는데 과 같은 number 배열의 경우 와  두가지로 나타낼 수 있다. any any는 타입…","fields":{"slug":"/2023-10-17-Everyday-Types/"},"frontmatter":{"date":"October 17, 2023","title":"Typescript: EveryDay Types","tags":["typescript"]}},{"excerpt":"More On Functions😃 타입스크립트에서 함수를 다루는 법을 알아보자 Function Type Expressions 타입스크립트에서 fuction을 표현할 때 기본적으로 parameter와 return 값에 대해 타입으로 표현한다. Parameter type의 경우 타입을 정해주지 않으면 any로 정해진다. Call Signatures 자바스크립…","fields":{"slug":"/2023-10-23-MoreOnFunctions/"},"frontmatter":{"date":"October 23, 2023","title":"Typescript: More On Functions","tags":["typescript"]}},{"excerpt":"Object Types 자바스크립트에서 object는 정말 자주 쓰이는 자료구조로, 함수의 param의 타입이나 interface, type alias를 이용해서 타입을 지정해서 자주 사용한다. Property Modifier object 타입 속성을 정의할 때 modifier를 통해 추가적인 속성들을 정의해줄 수 있다. Optional 자바스크립트에서 …","fields":{"slug":"/2023-10-31-Object-Types/"},"frontmatter":{"date":"October 31, 2023","title":"Typescript: Object Types","tags":["typescript"]}},{"excerpt":"Generics Generic은 재사용 가능한 타입을 만드는 방법이다. 앞서 정리한 대로 단순히 type을 number나 string으로 정의하게 되면 타입에 맞게 여러개의 반복된 함수나 변수를 만들어야하는 불편함이 발생한다. 이를 해결하기 위해 우리는 Generic을 이용할 수 있다. Working with Generic Type Variables \n앞…","fields":{"slug":"/2023-11-07-Generics/"},"frontmatter":{"date":"November 07, 2023","title":"Typescript: Generics","tags":["typescript"]}},{"excerpt":"Keyof 는 객체 타입의 키값, 속성에 대한 타입으로 string 또는 numeric literal의 union으로 나타내진다. 이때 또는  인덱스 signature를 가지고 있다면 keyof는 해당 타입을 반환한다. TypeOf  연산자는 자바스크립트 자체가 이미 가지고 있다. 표현식에서 사용가능하고 변수의 타입을 추론할 때 쓰일 수 있다. typeo…","fields":{"slug":"/2023-11-16-keyof,typeof, indexed Access Types/"},"frontmatter":{"date":"November 16, 2023","title":"Typescript: Keyof, TypeOf, Indexed","tags":["typescript"]}},{"excerpt":"Conditional Types 🤩 타입스크립트에서 조건부 타입은 와 같은 형태로 사용된다. 이는 가 에 할당 가능한지에 따라서 와 중 하나의 타입을 선택하게 된다. 이러한 모습은 기존 javascript의 삼항연산자와 유사하게 느껴진다.  Generic과 함께 사용하기 Generic과 함께 사용하면 더 유용하게 사용할 수 있다. 다음 예제를 보자. In…","fields":{"slug":"/2023-12-19-conditional-types/"},"frontmatter":{"date":"December 19, 2023","title":"Typescript: Conditional Types","tags":["typescript"]}}]}},"pageContext":{"series":"Typescript"}},"staticQueryHashes":[],"slicesMap":{}}