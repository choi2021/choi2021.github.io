{"componentChunkName":"component---src-templates-post-jsx","path":"/2023-01-10-타입시스템-2/","result":{"data":{"site":{"siteMetadata":{"title":"Troy DevLog"}},"markdownRemark":{"id":"8a0f9e55-e3e4-5418-a3a4-72acabfe070a","excerpt":"🎚 타입 시스템(2) 타입스크립트의 타입 시스템 중 객체 래퍼 타입, 잉여 속성 체크, 함수 표현식, 타입과 인터페이스의 차이에 대해서 정리해보자 한다. 📦 객체 래퍼 타입 문자열을 입력하고 을 찍으면 객체처럼 우리는 다양한 메소드를 이용할 수 있다. 이렇게 가능한 것은 자바스크립트가 을 찍는 순간 에서  객체 래퍼로 타입변환이 이루어진다. 객체로 변환해…","html":"<h1>🎚 타입 시스템(2)</h1>\n<p>타입스크립트의 타입 시스템 중 <strong>객체 래퍼 타입, 잉여 속성 체크, 함수 표현식, 타입과 인터페이스의 차이</strong>에 대해서 정리해보자 한다.</p>\n<h2>📦 객체 래퍼 타입</h2>\n<p>문자열을 입력하고 <code class=\"language-text\">.</code>을 찍으면 객체처럼 우리는 다양한 메소드를 이용할 수 있다. 이렇게 가능한 것은 자바스크립트가 <code class=\"language-text\">.</code>을 찍는 순간 <code class=\"language-text\">string</code>에서 <code class=\"language-text\">String</code> 객체 래퍼로 타입변환이 이루어진다. 객체로 변환해 메소드를 사용한 후에는 객체 타입에서 다시 원시형으로 돌아간다. </p>\n<p>이렇게 유용한 객체 래퍼 타입이지만 정의된 타입을 보면 오타가 나기 쉽게 되어있다.  </p>\n<ul>\n<li>원시형: <code class=\"language-text\">string</code>, 객체래퍼:<code class=\"language-text\">String</code></li>\n<li>원시형: <code class=\"language-text\">number</code>, 객체래퍼:<code class=\"language-text\">Number</code></li>\n<li>원시형: <code class=\"language-text\">boolean</code>, 객체래퍼:<code class=\"language-text\">Boolean</code></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token function\">getStringLen</span><span class=\"token punctuation\">(</span>foo<span class=\"token operator\">:</span> String<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> foo<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">getStringLen</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">getStringLen</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">isGreeting</span><span class=\"token punctuation\">(</span>phrases<span class=\"token operator\">:</span> String<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'good day'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>phrases<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Argument of type 'String' is not assignable to parameter of type 'string'.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>크게 문제가 되지 않을 것 같아 보이지만 원시형은 객체래퍼에 할당할 수 있는 반면 객체 래퍼는 원시형에 할당할 수 없기 때문에 오타로 인한 에러가 발생한 것을 볼 수 있다. 직접 객체 래퍼를 할당하지 않게 주의해야 함을 보여주는 예제다. </p>\n<h2>✒ 잉여 속성 체크</h2>\n<p>잉여속성 체크는 우리가 정의해 준 타입의 속성들 외의 추가된 속성이 있는지 확인하는 과정을 의미한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Dog</span> <span class=\"token punctuation\">{</span>\n  age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> dog1<span class=\"token operator\">:</span> Dog <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  age<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">'바둑이'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">bark</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">//  'bark' does not exist in type 'Dog'.</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'짖기'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>위 예제에서 <code class=\"language-text\">Dog</code>타입에 bark 속성이 없기 때문에 에러가 발생했지만 앞서 배웠던 구조적 타이핑의 의미로 보았을 때는 필요한 속성인 age와 name이 있기 때문에 에러가 나지 않아야 할 것 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> dog2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  age<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">'바둑이'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">bark</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'짖기'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> r<span class=\"token operator\">:</span> Dog <span class=\"token operator\">=</span> dog2<span class=\"token punctuation\">;</span></code></pre></div>\n<p>같은 조건이지만 앞선 예제와는 다르게 에러가 발생하지 않았다. </p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Options</span> <span class=\"token punctuation\">{</span>\n  title<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  darkMode<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">createWindow</span><span class=\"token punctuation\">(</span>options<span class=\"token operator\">:</span> Options<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">.</span>darkMode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// setDarkMode()</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">createWindow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  title<span class=\"token operator\">:</span> <span class=\"token string\">'Spider'</span><span class=\"token punctuation\">,</span>\n  darkmode<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'darkmode' does not exist in type 'Options'. Did you mean to write 'darkMode'?</span>\n\n<span class=\"token keyword\">const</span> o1<span class=\"token operator\">:</span> Options <span class=\"token operator\">=</span> document<span class=\"token punctuation\">;</span> </code></pre></div>\n<p>둘의 차이점은 뭘까?</p>\n<p>앞선 에러가 발생한 예제들은 <code class=\"language-text\">잉여속성 체크</code>가 진행되었기 때문에 에러가 발생했다. <code class=\"language-text\">잉여속성 체크</code>가 발생하는 조건은 dog1처럼 <code class=\"language-text\">객체 리터럴</code>을 할당하거나 createWindow처럼 <code class=\"language-text\">함수에 매개변수를 전달할 때</code> 적용된다. </p>\n<p>에러가 발생하지 않은 경우는 변수를 통해 값을 전달했을 때로 임시 변수를 전달하면 <code class=\"language-text\">잉여 속성 체크</code>가 이루어지지 않는다. 우리가 정의한 속성만 추가되게 하는 경우에 <code class=\"language-text\">잉여속성 체크</code>를 적용해 오류를 찾을 수 있는 장점이 있다. 하지만 <code class=\"language-text\">구조적 타이핑</code>의 관점과 충돌하기 때문에 필요할 때에 적절하게 사용할 필요가 있어 보였다.</p>\n<h2>🎈 함수 표현식</h2>\n<p> 자바스크립트에서 함수를 사용하는 방법에는 함수 선언문과 함수 표현식이 있다. 타입스크립트는 함수 표현식일 때 <code class=\"language-text\">매개변수와 반환 값을 타입으로 선언</code>할 수 있는 장점을 갖고 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">sub</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> a <span class=\"token operator\">-</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">mul</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> a <span class=\"token operator\">*</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">div</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> a <span class=\"token operator\">/</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">BinaryFn</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> add<span class=\"token operator\">:</span> <span class=\"token function-variable function\">BinaryFn</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> sub<span class=\"token operator\">:</span> <span class=\"token function-variable function\">BinaryFn</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> a <span class=\"token operator\">-</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> mul<span class=\"token operator\">:</span> <span class=\"token function-variable function\">BinaryFn</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> a <span class=\"token operator\">*</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> div<span class=\"token operator\">:</span> <span class=\"token function-variable function\">BinaryFn</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> a <span class=\"token operator\">/</span> b<span class=\"token punctuation\">;</span></code></pre></div>\n<p>앞선 예제는 함수 선언문을 이용해 매개변수의 타입을 정해 준 경우이고, 아래는 함수 표현식에 <code class=\"language-text\">BinaryFn</code>타입을 이용해 매개변수와 반환 값의 타입을 한번에 정의한 경우이다. 함수 선언문의 경우 일일이 매개변수의 타입을 정해 주어야 하고, 정한 타입을 재 사용할 수 없는 반면, <code class=\"language-text\">함수 표현식</code>의 경우 함수에 필요한  매개변수와 반환 값의 타입을 한번에 표현해 훨씬 간결하면서도 재 사용성도 높이는 것을 볼 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">checkedFetch</span><span class=\"token punctuation\">(</span>input<span class=\"token operator\">:</span> RequestInfo<span class=\"token punctuation\">,</span> init<span class=\"token operator\">?</span><span class=\"token operator\">:</span> RequestInit<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">,</span> init<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>response<span class=\"token punctuation\">.</span>ok<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>response<span class=\"token punctuation\">.</span>status<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> checkedFetch<span class=\"token operator\">:</span> <span class=\"token keyword\">typeof</span> <span class=\"token function-variable function\">fetch</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">,</span> init<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">,</span> init<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>response<span class=\"token punctuation\">.</span>ok<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>response<span class=\"token punctuation\">.</span>status<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>위의 예제는 내가 주로 쓰듯이 각각의 매개변수의 타입을 정해 준 모습이고, 아래는 내장된 <code class=\"language-text\">fetch</code> 타입으로 훨씬 간결하게 나타낸 모습이다. 이렇게 동일한 매개변수와 반환 값의 타입을 가지는 함수의 경우 함수 전체의 타입을 정해 재 사용하는 것이 효율적인 것을 새롭게 알게 되었다.</p>\n<h2>🥊 타입 VS Interface</h2>\n<p>타입과 interface는 항상 고민되는 문제다. 공통점이 많기 때문에 어떤 점을 기준으로 사용해야 할까 고민되는 경우가 많았다. 이러한 고민은 둘 다 가능한 공통점에서 시작되었다.</p>\n<h3>공통점</h3>\n<h4>1) 타입 정의</h4>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">TState</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> String<span class=\"token punctuation\">;</span>\n  capital<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">IState</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  capital<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>둘 다 동일하게 커스텀 타입을 정의할 수 있다.</p>\n<h4>2) Index와 함수 정의</h4>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">TDict</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>key<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">IDict</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span>key<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">TFn</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">IFn</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>둘 다 동일하게 index와 함수를 정의할 수 있다.</p>\n<h4>3) Generic과 확장</h4>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">TPair<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  first<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">;</span>\n  second<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">IPair<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token punctuation\">{</span>\n  first<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">;</span>\n  second<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">IStateWithPop</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">TState</span> <span class=\"token punctuation\">{</span>\n  population<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">TStateWithPop</span> <span class=\"token operator\">=</span> IState <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">{</span> population<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>둘 다 Generic을 사용할 수 있고 확장도 가능하다.</p>\n<h4>4) 클래스 구현</h4>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">StateT</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">TState</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n  capital<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">StateI</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">IState</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n  capital<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>클래스를 구현하는 것도 둘 다 가능하다.</p>\n<h3>차이점</h3>\n<p>대부분이 둘 다 가능하기 때문에 차이점이 없어보이지만 interface만 가능한 것과 type만이 가능한 역할이 있다.</p>\n<h4>복잡한 type</h4>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">AorB</span> <span class=\"token operator\">=</span> <span class=\"token string\">'a'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>union type이나 조건부 타입과 같이 좀 더 복잡한 type을 위해서는 interface가 사용될 수 없다.  type은 활용성이 interface보다 높다고 할 수 있다.</p>\n<h4>보강</h4>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">IState</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  capital<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">IState</span> <span class=\"token punctuation\">{</span>\n  population<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>interface는 type과는 다르게 속성을 같은 이름의 interface을 선언해 확장할 수 있는 특징을 가진다. 이것을 통해서 실제로 우리가 사용하는 내장 메소드들의 정의가 버전 별로 확장되어 적용되고 있다.</p>\n<h3>🤔 그래서 기준은 어떤 것일까?</h3>\n<p>사용할 때 기준은 먼저 사용할 때 <code class=\"language-text\">일관성을 유지해야 한다</code>는 점이다. type과 interface는 공통점이 많기 때문에 둘 다 가능한 경우가 많다. 그렇지만 type을 쓰다가 interface를 쓰는 것이 아니라 하나로 정해서 일관되게 작성하는 코드스타일이 중요하다.</p>\n<p>각각의 차이점을 고려해서 복잡한 타입은 <code class=\"language-text\">type</code>을 사용하고 보강이 필요한 경우에는 <code class=\"language-text\">interface</code>를 이용해 API를 정의할 때 사용할 수 있다. </p>\n<p>[참조]</p>\n<p><a href=\"https://search.shopping.naver.com/book/catalog/32473346832\">이펙티브 타입스크립트</a></p>","frontmatter":{"title":"TS study: 타입 시스템 (2)","date":"January 10, 2023","tags":["typescript"],"series":"Typescript"},"fields":{"slug":"/2023-01-10-타입시스템-2/","readingTime":{"minutes":9.865}}},"seriesList":{"edges":[{"node":{"id":"450c65d9-1adb-5355-86a6-38e29edf10f5","fields":{"slug":"/2023-01-02-타입스크립트란/"},"frontmatter":{"title":"TS study: 타입스크립트란"}}},{"node":{"id":"30f66428-af72-5c78-bf83-6adedb7f226b","fields":{"slug":"/2023-01-07-타입시스템-1/"},"frontmatter":{"title":"TS study: 타입시스템 (1)"}}},{"node":{"id":"8a0f9e55-e3e4-5418-a3a4-72acabfe070a","fields":{"slug":"/2023-01-10-타입시스템-2/"},"frontmatter":{"title":"TS study: 타입 시스템 (2)"}}},{"node":{"id":"34de2078-05c8-5c18-ad6f-b50da3d61695","fields":{"slug":"/2023-01-16-타입시스템-3/"},"frontmatter":{"title":"TS study: 타입 시스템 (3)"}}},{"node":{"id":"c3a5ecab-ca1d-5597-a321-d4b866d72a4c","fields":{"slug":"/2023-01-24-타입추론 (1)/"},"frontmatter":{"title":"TS study: 타입 추론(1)"}}},{"node":{"id":"526d83da-deee-5851-bd4d-6ed71de266f8","fields":{"slug":"/2023-10-16-the_Basics/"},"frontmatter":{"title":"Typescript: The Basics"}}},{"node":{"id":"b8ceb0c1-25a0-51d0-ab4e-86977a6e3643","fields":{"slug":"/2023-10-18-Narrowing/"},"frontmatter":{"title":"Typescript: Narrowing"}}},{"node":{"id":"dcf311da-09d1-555a-8978-5c8cbd09f3e4","fields":{"slug":"/2023-10-17-Everyday-Types/"},"frontmatter":{"title":"Typescript: EveryDay Types"}}},{"node":{"id":"8fe67159-cfd9-54bf-b268-55dd2267c9b3","fields":{"slug":"/2023-10-23-MoreOnFunctions/"},"frontmatter":{"title":"Typescript: More On Functions"}}},{"node":{"id":"9655a307-90e6-5c82-b302-c3a78bf59193","fields":{"slug":"/2023-10-31-Object-Types/"},"frontmatter":{"title":"Typescript: Object Types"}}},{"node":{"id":"888c4fe2-471c-5bb5-9d97-5ae433bbe9c8","fields":{"slug":"/2023-11-07-Generics/"},"frontmatter":{"title":"Typescript: Generics"}}},{"node":{"id":"afbe0b5e-070e-5dd2-9c94-200338d5851d","fields":{"slug":"/2023-11-16-keyof,typeof, indexed Access Types/"},"frontmatter":{"title":"Typescript: Keyof, TypeOf, Indexed"}}},{"node":{"id":"dab6e2de-2654-5d7c-be1b-8f852db76d25","fields":{"slug":"/2023-12-19-conditional-types/"},"frontmatter":{"title":"Typescript: Conditional Types"}}}]},"previous":{"fields":{"slug":"/2023-01-07-타입시스템-1/"},"frontmatter":{"title":"TS study: 타입시스템 (1)"}},"next":{"fields":{"slug":"/2023-01-16-타입시스템-3/"},"frontmatter":{"title":"TS study: 타입 시스템 (3)"}}},"pageContext":{"id":"8a0f9e55-e3e4-5418-a3a4-72acabfe070a","series":"Typescript","previousPostId":"30f66428-af72-5c78-bf83-6adedb7f226b","nextPostId":"34de2078-05c8-5c18-ad6f-b50da3d61695"}},"staticQueryHashes":[],"slicesMap":{}}