{"componentChunkName":"component---src-templates-post-jsx","path":"/2022-10-20-모으잡-cors-에러핸들링/","result":{"data":{"site":{"siteMetadata":{"title":"Troy DevLog"}},"markdownRemark":{"id":"72b694be-e580-5664-a455-ea458cd8ff2b","excerpt":"CORS란 CORS는 Cross-Origin Resource Sharing의 약자로, 서버가 알고있는 클리언트의 url에서 요청시에 응답을 막을 수 있는 보안 기능이다. 같은 도메인끼리 밑의 예로 https://localhost:3000이란 주소로 서버와 클라이언트가 작동하고 있다면 둘은 아무 문제 없이 요청과 응답을 한다. 하지만 도메인이 달라질 경우에…","html":"<h1>CORS란</h1>\n<p>CORS는 Cross-Origin Resource Sharing의 약자로, 서버가 알고있는 클리언트의 url에서 요청시에 응답을 막을 수 있는 보안 기능이다. 같은 도메인끼리 밑의 예로 <a href=\"https://localhost:3000%EC%9D%B4%EB%9E%80\">https://localhost:3000이란</a> 주소로 서버와 클라이언트가 작동하고 있다면 둘은 아무 문제 없이 요청과 응답을 한다. 하지만 도메인이 달라질 경우에 예로 서버는 <a href=\"https://localhost:5000%EC%97%90%EC%84%9C\">https://localhost:5000에서</a> 클라이언트는 <a href=\"https://localhost:3000%EC%97%90%EC%84%9C\">https://localhost:3000에서</a> 작동할 경우에는 다음과 같은 에러를 보여준다.</p>\n<p><img src=\"https://miro.medium.com/max/875/1*XxzATAY3-XDUvB2GJL2QnA.png\" alt=\"img\"></p>\n<p>도메인이 같다는 의미는 scheme(https://), hostname(localhost), portNumber(:5000)이 모두 같을 때를 의미한다. 그렇기 때문에 위의 예는 포트넘버가 다르기 때문에 발생한 cors에러라고 할 수 있다.</p>\n<p>우리가 원하는 도메인의 클라이언트의 요청만 받기위해서는 서버의 헤더에 <strong>Access-Control-Allow-Origin</strong>과 <strong>Access-Control-Allow-Methods</strong>를 추가해 응답을 보내주면 에러없이 응답을 보내줄 수 있다.</p>\n<p>[출처: <a href=\"https://medium.com/swlh/how-cors-cross-origin-resource-sharing-works-79f959a84f0e\">medium how cors works</a>]</p>\n<img src='https://miro.medium.com/max/875/0*SweGXbcps8xY31ds.png' width='700px'>\n<h2>Express의 CORS 패키지</h2>\n<p>저번에 알아봤던 cors 패키지는 위의 두가지 header의 내용을 간단하게 추가할 수 있게 도와준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token function\">cors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">origin</span><span class=\"token operator\">:</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"https://localhost:3000\"</span><span class=\"token punctuation\">]</span>\n    <span class=\"token literal-property property\">optionSuccessStatus</span><span class=\"token operator\">:</span><span class=\"token number\">200</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>origin에 추가한 주소를 통해서 어떤 url의 요청에 추가된 헤더 내용을 담아줄 건지 정해줄 수 있다.</p>\n<h1>에러핸들링</h1>\n<p>에러핸들링은 크게 동기적인 코드내의 에러와 비동기적인 코드내의 에러로 나눌 수 있다. 기본적으로 에러처리는 발생한 미들웨어에서 최대한 적절하게 해주는 게 중요하다. 혹시 모를 에러를 위해 가장 마지막에 에러처리를 위한 미들웨어를 두어, 서버에러를 알려주는 게 기본적인 구조이다.</p>\n<h3>1. 동기적 코드</h3>\n<p>동기적 코드는 순서대로 반드시 실행이 마치고 다음으로 넘어가기 때문에 에러 발생시 어플리케이션이 아예 죽어버릴 수 있다. 이를 해결할 수 있는 방법은 try-catch문으로 에러를 잡아서 에러처리를 해준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/sync\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFileSync</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"text.txt\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//동기적으로 파일을 읽어</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">404</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error<span class=\"token punctuation\">,</span> req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">message</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Server error\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3>2. 비동기적 코드</h3>\n<p>비동기적 코드는 try-catch문을 사용할 수 없기 때문에 내부적으로 콜백함수를 이용하거나, catch를 통해 에러를 처리해야한다. 에러를 다음 미들웨어로 넘겨서 처리하고 싶을때는 next에 error를 담아서 보낼 수 있다.</p>\n<h4>콜백함수</h4>\n<p>콜백함수로 에러를 처리하는 경우에 에러를 처리해주지 않으면 에러가 났지만 콜백으로 넘어가 클라이언트 페이지는 계속해서 기다리고 있고, 마지막 에러처리 미들웨어까지 전달되지 않으므로, 콜백함수 내에서 처리를 해줘야한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/async\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/text.txt\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">404</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"File not found\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error<span class=\"token punctuation\">,</span> req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">message</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Server error\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3>Promise</h3>\n<p>Promise는 catch를 이용해서 에러 핸들링을 할 수 있다. 에러처리를 해주지 않으면 위와 같이 에러가 마지막 미들웨어로 넘어가지 않는다. 그렇기 때문에 꼭 catch를 이용해서 에러 처리가 필요하다. 밑 예제는 next(error)를 이용해, 마지막 미들웨어로 에러를 전달해주었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/async\"</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span>res<span class=\"token punctuation\">,</span>next</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">return</span> fsAsync<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/text.txt'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error<span class=\"token punctuation\">,</span> req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">message</span><span class=\"token operator\">:</span> <span class=\"token string\">'Server error'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//여기서 에러처리</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>async-await</h3>\n<p>async-await은 내부에서 동기적으로 코드를 사용할 수 있어서 try-catch문을 사용할 수 있고, 함수 자체는 promise로 반환되기 때문에 동일하게 에러처리를 해주지 않으면 에러가 전달되어지지 않는다. 그렇기 때문에 동기적인 코드때 처럼 꼭 try-catch문으로 에러처리를 해주어야한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/file3\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> fsAsync<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/text.txt\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">404</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"File not found\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error<span class=\"token punctuation\">,</span> req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">message</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Server error\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//여기서 에러처리</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>비동기는 에러가 자동으로 넘어가지지 않는 점 때문에 해당 로직을 항상 처리를 해줘야한다.</p>\n<p>마지막으로 에러를 전달할 수 있게 도와주는 패키지로 <strong>express-async-error</strong>가 있어 import만 하면 비동기에서도 에러 발생시 자동으로 마지막 미들웨어까지 전달될 수 있다. 자바스크립트의 비동기 처리와 동일하게 에러처리가 필요하다는 것을 느낄 수 있었다.</p>","frontmatter":{"title":"모으잡-express cors 에러, 에러핸들링","date":"October 20, 2022","tags":["사이드프로젝트","모으잡"],"series":"모으잡"},"fields":{"slug":"/2022-10-20-모으잡-cors-에러핸들링/","readingTime":{"minutes":6.175}}},"seriesList":{"edges":[{"node":{"id":"fbb4533a-723e-5252-ac98-c880bd9e222f","fields":{"slug":"/2022-09-22-채용공고-정리사이트-기획/"},"frontmatter":{"title":"채용공고 정리 서비스 기획"}}},{"node":{"id":"efb31bb7-b230-5b3a-bf03-af7bc949639c","fields":{"slug":"/2022-10-15-모으잡-기획-구체화/"},"frontmatter":{"title":"모으잡-기획 구체화"}}},{"node":{"id":"9c730376-b192-5125-bffc-4eeda18b7d68","fields":{"slug":"/2022-10-16-파이썬을-이용한-크롤러제작/"},"frontmatter":{"title":"모으잡-파이썬을 이용한 웹크롤러 제작"}}},{"node":{"id":"ee625e14-0c1c-52cc-97b4-7507fff98c99","fields":{"slug":"/2022-10-17-flask-서버만들기/"},"frontmatter":{"title":"모으잡-flask이용해 SSR서버만들기"}}},{"node":{"id":"72b694be-e580-5664-a455-ea458cd8ff2b","fields":{"slug":"/2022-10-20-모으잡-cors-에러핸들링/"},"frontmatter":{"title":"모으잡-express cors 에러, 에러핸들링"}}},{"node":{"id":"10d9caf7-56a9-5377-a0bb-d16a96bc0bbf","fields":{"slug":"/2022-10-22-모으잡-express-서버-제작-시작-cheerio/"},"frontmatter":{"title":"모으잡-express 서버 제작 시작과 cheerio"}}},{"node":{"id":"0318dcb1-92cd-5b90-92f7-6ac08d34934f","fields":{"slug":"/2022-10-23-모으잡-puppeteer-크롤러제작-프론트페이지-구상/"},"frontmatter":{"title":"모으잡-puppeteer을 이용한 크롤러제작, 프론트페이지 구상"}}},{"node":{"id":"ee78ba91-55fe-52e4-b52e-3fd75064102b","fields":{"slug":"/2022-10-24-모으잡-프론트페이지-UI제작/"},"frontmatter":{"title":"모으잡-프론트페이지 UI제작"}}},{"node":{"id":"4d8fbbcf-f6bd-532c-9616-d545a976bdc8","fields":{"slug":"/2022-10-25-모으잡-UI-수정-크롤링-데이터-연결/"},"frontmatter":{"title":"모으잡-프론트페이지 UI수정, 크롤링한 데이터 받아오기"}}},{"node":{"id":"2ae6ec5c-3c76-51df-9c62-42377b522f58","fields":{"slug":"/2022-11-23-모으잡-Next-migration/"},"frontmatter":{"title":"모으잡-Next js로 migration, 디자인 수정"}}},{"node":{"id":"f98d7300-5ba4-5582-81c9-563366499628","fields":{"slug":"/2022-11-25-모으잡-회원가입로그인-로직/"},"frontmatter":{"title":"모으잡-firebase를 이용한 회원가입 로직 구현"}}},{"node":{"id":"da8d5d14-2fc0-53f4-8a30-1b558488aa2c","fields":{"slug":"/2022-11-29-모으잡 DB연결과-크롤링-기능-연결/"},"frontmatter":{"title":"모으잡-DB연결과 크롤링 기능 연결"}}},{"node":{"id":"ce15da4f-20cc-557c-a65e-d3a9fc40a2d5","fields":{"slug":"/2022-11-30-모으잡-배포/"},"frontmatter":{"title":"모으잡-vercel부터 aws까지 배포과정"}}},{"node":{"id":"bc74e94c-1d4a-5507-a390-a54e07d094e6","fields":{"slug":"/2022-12-17-모으잡-인증인가/"},"frontmatter":{"title":"모으잡-SSR을 이용한 인증,인가 도입"}}},{"node":{"id":"7dbb331a-341a-5763-acac-83425a2e9707","fields":{"slug":"/2022-12-23-모으잡-기획-디자인 수정/"},"frontmatter":{"title":"모으잡-기획, 디자인 수정"}}},{"node":{"id":"204104d7-e0cf-5dff-9c31-15b046d4e428","fields":{"slug":"/2022-12-25-모으잡-서버사이드-랜더링을-이용한-성능개선/"},"frontmatter":{"title":"모으잡-서버사이드 랜더링을 이용한 성능 개선"}}}]},"previous":{"fields":{"slug":"/2022-10-19-Express-기초/"},"frontmatter":{"title":"NodeJS: express"}},"next":{"fields":{"slug":"/2022-10-22-모으잡-express-서버-제작-시작-cheerio/"},"frontmatter":{"title":"모으잡-express 서버 제작 시작과 cheerio"}}},"pageContext":{"id":"72b694be-e580-5664-a455-ea458cd8ff2b","series":"모으잡","previousPostId":"f0792841-794b-5ec0-a351-a2f7605adc40","nextPostId":"10d9caf7-56a9-5377-a0bb-d16a96bc0bbf"}},"staticQueryHashes":[],"slicesMap":{}}