{"componentChunkName":"component---src-templates-post-jsx","path":"/2022-09-13-함수/","result":{"data":{"site":{"siteMetadata":{"title":"Troy DevLog"}},"markdownRemark":{"id":"362a634b-e650-5526-851e-d5fbd908dab8","excerpt":"시작하기 앞서 매일 TIL로 짤막하게 공부한 내용을 정리하려 했지만 하나의 주제의 맥락을 다 담기 힘든 부분이 있어서 작은 주제 하나씩 정하고 글을 써나가 보려 한다. 1) 함수의 정의 함수는 어떠한 하나의 일을 수행할 수 있는 관련 코드들의 모음이라고 할 수 있다. 함수를 잘 작성하면 관련 코드가 한 곳에 모여있기에 유지보수에 유리하고.\n필요할 때마다 …","html":"<h3>시작하기 앞서</h3>\n<p>매일 TIL로 짤막하게 공부한 내용을 정리하려 했지만 하나의 주제의 맥락을 다 담기 힘든 부분이 있어서 작은 주제 하나씩 정하고 글을 써나가 보려 한다.</p>\n<h2>1) 함수의 정의</h2>\n<p>함수는 어떠한 하나의 일을 수행할 수 있는 관련 코드들의 모음이라고 할 수 있다. 함수를 잘 작성하면 관련 코드가 한 곳에 모여있기에 유지보수에 유리하고.\n필요할 때마다 재 사용할 수 있으며, 가독성이 높은 장점을 갖는다. 함수는 다음과 같은 구조를 갖는다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">multiply</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> a <span class=\"token operator\">*</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위 코드는 multiply라는 이름을 가진 함수를 선언하는 선언문이다. function이라는 키워드로 선언문을 시작하며 함수의 이름과 함수의 인자들을 순서대로\n작성한다. 코드 블럭 안에는 일처리를 위한 코드들을 담고 반환할 값은 return을 통해 전달한다.</p>\n<p>이러한 함수는 자바스크립트에서 오브젝트 데이터 타입을 가지고 있어 힙에 저장되며, 호이스팅을 통해 코드의 가장 위로 올라가 선언되어 코드 순서와 상관없이\n사용이 가능하다. (Hoisting은 중요한 주제이기 때문에 나중에 자세히 다루려 한다)</p>\n<p>함수는 오브젝트이기 때문에 갖는 또 다른 특징이 있는데 \"값을 갖는다\"는 점이다. 이러한 특징을 이용해 자바스크립트에서 만드는 방법에는 두 가지가 존재한다.\n<b>함수 선언문</b>과 <b>함수 표현식</b>이다.</p>\n<h2>2) 함수 선언문과 함수 표현식</h2>\n<p>함수 선언문은 이미 설명한 구조로 이루어져 있으며, 함수 표현식은 다음과 같이 정의할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//함수 표현식의 첫번재 방법</span>\n<span class=\"token keyword\">let</span> <span class=\"token function-variable function\">multiply</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> a <span class=\"token operator\">*</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//함수 표현식의 두번째 방법:arrow function</span>\n<span class=\"token function-variable function\">mulitiply</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> a <span class=\"token operator\">*</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function-variable function\">multiply</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> a <span class=\"token operator\">*</span> b<span class=\"token punctuation\">;</span></code></pre></div>\n<p>함수는 오브젝트이기 때문에 함수를 가리키고 있는 주소 값을 가진다. 이 주소 값을 변수에 할당한 문이 \"함수표현식\"이며 구조는 할당하는 부분을 제외하고 선언문과 유사하다. 함수 표현식에는 위와 같은 방법 외에 <b>화살표 함수 (arrow function)</b>으로도 나타낼 수 있다. 화살표 함수는 함수 표현식보다 간략하게 표현할 수 있는 방법으로 인자를 먼저 작성한 후 =>와 함께 코드블럭을 작성한다. 이때 코드블럭 내 특정한 일을 하지 않고 반환 값만 존재한다면 생략하고 반환할 값만 작성할 수도 있다.</p>\n<h2>3) 함수의 인자</h2>\n<p>함수의 인자는 함수에 전달되는 요소들로 함수의 코드 블럭 내부 실행 컨텍스트 (자세한 부분은 클로저 부분에서 다시 설명하려 한다)에 등록된 변수라고 할 수 있다. 이러한 인자는 함수 내 오브젝트인 arguments로 전달된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">multiply</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//[1,2]</span>\n  <span class=\"token keyword\">return</span> a <span class=\"token operator\">*</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">mulitply</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>다음과 같이 전달된 인자들은 arguments 배열에 각 요소로 저장되어 있으며, 얼마나 많은 인자들이 들어올지 모를 때는 다음과 같이 <b>Rest parameters</b> 을 사용할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">showRestParams</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>numbers</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//[1,2,3,4]</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//[3,4]</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">mulitply</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>4) 콜백함수 (Callback function)</h2>\n<p>콜백함수는 자바스크립트를 공부하고 프로젝트를 진행하면서 너무나도 중요하다고 많이 느낀 부분이라 꼭 정리가 필요했던 부분이었다. 앞서 함수는 오브젝트이기 때문에 참조 값, 주소 값을 저장하고 있다고 했다. 이때 콜백 함수는 말 그대로 필요한 때에 \"call-back\", 참조 값을 이용해 다시 호출되는 함수이다.</p>\n<p>콜백함수가 가능한 이유는 자바스크립트가 일급함수 (1st-class function)를 가지고 있기 때문이다. 일급함수는 다음과 같이 정의될 수 있다.</p>\n<ol>\n<li>다른 함수의 인자로 전달이 가능하다</li>\n<li>함수가 다른 함수를 반환할 수 있다</li>\n<li>변수에 할당할 수 있다</li>\n<li>함수끼리 비교할 수 있다</li>\n</ol>\n<p>위와 같은 특징은 모두 함수가 오브젝트이고 오브젝트는 주소값을 변수에 저장하기 때문에 가능하다. 그렇기에 콜백함수는 다른 함수의 인자로 전달되어 반환되어 필요한 때에 사용 가능하다. 이때 함수를 인자로 받고 반환하는 함수는 <b>고차함수</b>라고 한다. 예로 브라우저 API인 setTImeOut과 같은 함수가 될 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>setTimeOut은 정해진 시간 후에 전달 받은 함수를 실행하는 브라우저 API로 <b>고차함수</b>, 전달된 함수를 <b>콜백함수 (일급함수) </b>라 할 수 있다.</p>\n<h2>5) 불변성</h2>\n<p>함수를 사용해서 값을 바꾸고 할 때, 주의할 점 중 하나인 <b>불변성(immutability )</b>에 대해 정리해 보고자 한다.</p>\n<p>먼저 받은 인자가 원시형 타입의 값일 경우이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">changeToRedColor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  a <span class=\"token operator\">=</span> <span class=\"token string\">'Red'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> prevColor <span class=\"token operator\">=</span> <span class=\"token string\">'blue'</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">changeToRedColor</span><span class=\"token punctuation\">(</span>prevColor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//반환은 \"Red\"이지만 prevColor는 \"blue\"</span></code></pre></div>\n<p>원시형의 경우에는 전달 받은 인자의 값을 변경하더라도 블럭 외부의 변수에 영향을 끼치지 않는다. 문제는 전달한 인자가 오브젝트일 때 생긴다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">changeToRedColor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  a<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> <span class=\"token string\">'Red'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> prevColor <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">color</span><span class=\"token operator\">:</span> <span class=\"token string\">'blue'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">changeToRedColor</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//{color:\"Red\"}</span></code></pre></div>\n<p>위는 반환도 하지 않았지만 오브젝트 속성값이 바뀌어 버렸다. 이처럼 함수 내부에서 받은 인자를 바꾸는 코드는 예상하지 못할 에러를 만들 수 있으므로, 꼭 인자의 값을 수정해서 사용해야 한다면 이를 해결하기 위해 <code class=\"language-text\">{...obj}</code>와 같이 새롭게 오브젝트를 만드는 방법을 통해 사용해야 한다.</p>","frontmatter":{"title":"함수","date":"September 13, 2022","tags":["javascript"],"series":null},"fields":{"slug":"/2022-09-13-함수/","readingTime":{"minutes":8.135}}},"seriesList":{"edges":[{"node":{"id":"db12bfaf-9b68-5456-b2d3-bf7af6db01f6","fields":{"slug":"/2022-09-06-BEM과-자료형/"},"frontmatter":{"title":"BEM과 자바스크립트의 자료형"}}},{"node":{"id":"1b75d916-f93f-54a4-bcb0-ee6a88e1e807","fields":{"slug":"/2022-09-07-자바스트립트의-두가지-복사방법/"},"frontmatter":{"title":"자바스크립트의 두가지 복사 방법"}}},{"node":{"id":"11c1a396-7281-552a-9589-6f14d399473b","fields":{"slug":"/2022-09-07-자바스크립트의-타입과연산자/"},"frontmatter":{"title":"자바스크립트의 타입과 연산자"}}},{"node":{"id":"3b564afa-9e11-5817-9130-4e2a191f4dff","fields":{"slug":"/2022-09-10-intersection-observer /"},"frontmatter":{"title":"Intersection observer"}}},{"node":{"id":"ac0c72d8-87ec-5038-8d94-316c5fcc3d62","fields":{"slug":"/2022-09-12-브라우저API/"},"frontmatter":{"title":"Browser API"}}},{"node":{"id":"362a634b-e650-5526-851e-d5fbd908dab8","fields":{"slug":"/2022-09-13-함수/"},"frontmatter":{"title":"함수"}}},{"node":{"id":"fa488a20-ff1a-5d21-a871-7cd7a1943bb7","fields":{"slug":"/2022-09-14-객체/"},"frontmatter":{"title":"객체"}}},{"node":{"id":"93e28849-ee68-5f54-a013-82287b705626","fields":{"slug":"/2022-09-17-빌트인객체/"},"frontmatter":{"title":"빌트인 객체"}}},{"node":{"id":"792817ac-87f4-5be2-a7aa-360f10d5c8b4","fields":{"slug":"/2022-09-19-array/"},"frontmatter":{"title":"Array"}}},{"node":{"id":"b9665749-4456-51bc-8980-7b1df634660e","fields":{"slug":"/2022-09-22-iteration/"},"frontmatter":{"title":"Iteration"}}},{"node":{"id":"b36e6692-59b2-579e-a86a-a032da431840","fields":{"slug":"/2022-09-24-Map과Set/"},"frontmatter":{"title":"Map과 Set"}}},{"node":{"id":"483fabc0-6bc7-5db7-9654-84987635add6","fields":{"slug":"/2022-10-06-HTTP란/"},"frontmatter":{"title":"HTTP 정리"}}},{"node":{"id":"197d4909-e862-5b9a-8676-b53e027e5379","fields":{"slug":"/2022-10-18-Node-JS-기초/"},"frontmatter":{"title":"Node js:NodeJS 이용한 서버 만들기"}}},{"node":{"id":"bd10a339-6c06-5837-862e-192c45081282","fields":{"slug":"/2022-10-19-Express-기초/"},"frontmatter":{"title":"NodeJS: express"}}},{"node":{"id":"8195c683-dc7e-58d3-b7b6-c5a1e78b6522","fields":{"slug":"/2022-11-18-CSR과-SSR/"},"frontmatter":{"title":"CSR과 SSR 그리고 Universal Rendering"}}},{"node":{"id":"f05c2eb8-16da-5e6e-a906-bbdffa05ace6","fields":{"slug":"/2022-11-20-스코프-실행컨테스트-클로저/"},"frontmatter":{"title":"스코프,실행컨텍스트,클로저"}}},{"node":{"id":"24ec8ed8-dfae-5619-8c64-df914805c0eb","fields":{"slug":"/2022-11-24-Critical-Rendering-Path/"},"frontmatter":{"title":"💻 Critical Rendering Path"}}},{"node":{"id":"c32a9017-54df-5eb4-98cd-5eba4b9ae41c","fields":{"slug":"/2022-11-27-비동기와-프로미스/"},"frontmatter":{"title":"비동기와 프로미스"}}},{"node":{"id":"364cb56c-45fc-52dc-8311-0f61a88dfdfe","fields":{"slug":"/2022-11-30-지스트-청원-서비스-회고/"},"frontmatter":{"title":"지스트 청원서비스 회고"}}},{"node":{"id":"40c2d20c-04f0-5876-aee6-be5b43bce78a","fields":{"slug":"/2022-12-02-제너레이터와-async-await/"},"frontmatter":{"title":"제너레이터와 Async-Await"}}},{"node":{"id":"4ed9db58-39c3-5f21-ad1e-59be0b94e988","fields":{"slug":"/2022-12-03-모으잡-리팩토링/"},"frontmatter":{"title":"모으잡-check box 수정, react-query 커스텀 훅, 크롤링 이슈"}}},{"node":{"id":"937a4bc1-5318-52a9-b6fd-61188127ce23","fields":{"slug":"/2022-12-05-호이스팅/"},"frontmatter":{"title":"호이스팅"}}},{"node":{"id":"09bdd07c-e41f-573e-bd66-71c526ab83f8","fields":{"slug":"/2022-12-09-쿠키-session-jwt/"},"frontmatter":{"title":"Cookie,Session과 JWT"}}},{"node":{"id":"b552cf79-29a8-5e87-a162-c03661121fb6","fields":{"slug":"/2022-12-09-this/"},"frontmatter":{"title":"this"}}},{"node":{"id":"05a00e19-f52a-5596-a97e-4f7390b20119","fields":{"slug":"/2022-12-10-http와https/"},"frontmatter":{"title":"http와 https"}}},{"node":{"id":"b91bff56-be62-5318-b6f1-dc3ddc789d08","fields":{"slug":"/2022-12-12-생성자함수-프로토타입/"},"frontmatter":{"title":"생성자 함수, 프로토타입"}}},{"node":{"id":"3b7d6329-680d-5db9-8ee6-cb15da44b6a8","fields":{"slug":"/2022-12-30-이벤트/"},"frontmatter":{"title":"이벤트"}}},{"node":{"id":"a94c02b8-45b0-5fac-b129-cf99c64a8f24","fields":{"slug":"/2022-12-23-class/"},"frontmatter":{"title":"클래스"}}},{"node":{"id":"d1dc9a50-2824-5859-826f-ceb445994e93","fields":{"slug":"/2023-01-23-리액트의-기본원리/"},"frontmatter":{"title":"React study: 리액트의 기본 원리"}}},{"node":{"id":"8dd5dd72-0262-582e-8a1d-33fd6b2245f3","fields":{"slug":"/2023-01-23-Vite와-번들러/"},"frontmatter":{"title":"Vite는 왜 빠를까, 번들러에 대한 정리"}}},{"node":{"id":"2cd6faf4-d340-58ee-a4bc-c4b16bc21c42","fields":{"slug":"/2022-12-20-리액트-성능보장/"},"frontmatter":{"title":"React study: 리액트가 성능을 보장하는 방법"}}},{"node":{"id":"717eb8fb-45a2-5fef-aaa9-c5c5eceb792a","fields":{"slug":"/2023-02-03-useState,useEffect, useRef, memo/"},"frontmatter":{"title":"React Study: useState, useEffect, useRef, memo"}}},{"node":{"id":"26ed4c76-848a-56e4-ae68-7e879e23bf77","fields":{"slug":"/2023-02-17-취업준비-회고/"},"frontmatter":{"title":"신입으로 시작하며 작성하는 취준 회고"}}},{"node":{"id":"166ce257-9146-51aa-a470-57c257844c07","fields":{"slug":"/2023-02-21-google.com-입력했을때-일어나는-일/"},"frontmatter":{"title":"google.com를 브라우저에 검색했을 때 일어나는 일"}}},{"node":{"id":"aaa88fe5-37a4-5ff4-9de2-959da89dcd86","fields":{"slug":"/2023-03-01-CDN/"},"frontmatter":{"title":"CDN은 뭘까?"}}},{"node":{"id":"f2fa5329-7ce4-5a65-9e28-0e4b1d188a6c","fields":{"slug":"/2023-03-05-디자인패턴/"},"frontmatter":{"title":"MVC, MVVM, Flux패턴 그리고 Service와 Repository 패턴"}}},{"node":{"id":"543681af-5db3-518d-b19e-7668efdda7fc","fields":{"slug":"/2023-03-31-2023년-3월회고/"},"frontmatter":{"title":"🐤 2023년 3월 회고"}}},{"node":{"id":"eecd0175-5be8-556d-a36a-756d4af0700b","fields":{"slug":"/2023-05-06-2023년-4월회고/"},"frontmatter":{"title":"😎 2023년 4월 회고"}}},{"node":{"id":"055d38ec-e2c0-5a63-aa95-fbc147365d29","fields":{"slug":"/2023-06-05-2023년-5월회고/"},"frontmatter":{"title":"☀︎ 2023년 5월 회고"}}},{"node":{"id":"32156a84-756c-50c3-bd9f-77b3dc2e7547","fields":{"slug":"/2023-07-06-2023년-6월회고/"},"frontmatter":{"title":"☼ 2023년 6월 회고"}}},{"node":{"id":"5438a45e-764a-5e14-b5ba-b71f4ba8be23","fields":{"slug":"/2023-08-09-2023년-7월회고/"},"frontmatter":{"title":"☂︎ 2023년 7월 회고"}}},{"node":{"id":"7a788f0b-75af-5eac-b509-fd0d3f119d98","fields":{"slug":"/2023-09-09-2023년-8월회고/"},"frontmatter":{"title":"😊 2023년 8월 회고"}}},{"node":{"id":"d47fe7ea-21c5-5c88-b64e-e34021957c29","fields":{"slug":"/2023-10-03-2023년-9월회고/"},"frontmatter":{"title":"🚅 2023년 9월 회고"}}},{"node":{"id":"4268b04a-703c-5bd0-8081-e900ee0ce15c","fields":{"slug":"/2023-11-01-2023년-10월회고/"},"frontmatter":{"title":"🧐 2023년 10월 회고"}}},{"node":{"id":"01c028b9-d56c-52a8-8719-eb5cbcf6ea70","fields":{"slug":"/2023-12-02-2023년-11월회고/"},"frontmatter":{"title":"😃 2023년 11월 회고"}}},{"node":{"id":"e696cf5b-451a-5fe0-a2cb-100a22d3d356","fields":{"slug":"/2023-12-31-2023년-12월회고/"},"frontmatter":{"title":"🌟 2023년 12월 회고"}}},{"node":{"id":"b0eb4259-0e5c-53fd-9fdc-cd5e53336653","fields":{"slug":"/2024-02-07-2024년-1월회고/"},"frontmatter":{"title":"🐥 2024년 1월회고"}}},{"node":{"id":"e7e95438-a61a-5b79-b114-ba3d8026517d","fields":{"slug":"/2024-03-02-2024년-2월회고/"},"frontmatter":{"title":"🙊 2024년 2월회고"}}},{"node":{"id":"1bc07ca5-bb4e-5644-a20e-a011d944706b","fields":{"slug":"/2024-03-03-자바스크립트의-동시성-이해하기/"},"frontmatter":{"title":"Promise.all의 동시성 이해하기"}}},{"node":{"id":"2735f12a-9ca9-5dc1-89f8-5871fa5521fd","fields":{"slug":"/2024-03-30-RN앱시작최적화/"},"frontmatter":{"title":"😎 App Start time 단축하기"}}}]},"previous":{"fields":{"slug":"/2022-09-12-브라우저API/"},"frontmatter":{"title":"Browser API"}},"next":{"fields":{"slug":"/2022-09-14-객체/"},"frontmatter":{"title":"객체"}}},"pageContext":{"id":"362a634b-e650-5526-851e-d5fbd908dab8","series":null,"previousPostId":"ac0c72d8-87ec-5038-8d94-316c5fcc3d62","nextPostId":"fa488a20-ff1a-5d21-a871-7cd7a1943bb7"}},"staticQueryHashes":[],"slicesMap":{}}